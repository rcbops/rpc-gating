---
- hosts: localhost
  connection: local
  gather_facts: False
  vars:
    count: 1
    inventory_path: '{{lookup("env", "WORKSPACE")}}/rpc-gating/playbooks/inventory'
  tasks:
    - name: Provision a set of public cloud instances
      local_action:
          module: rax
          name: "{{ instance_name }}"
          flavor: "{{ flavor }}"
          image: "{{ image }}"
          count: "{{ count }}"
          key_name: "jenkins"
          region: "{{ region }}"
          meta:
            build_config: core
          wait: yes
          wait_timeout: 900
          auto_increment: no
      register: rax
      until: rax|success
      retries: 5
      delay: 60

    - name: Display rax output on failure
      debug:
        var: rax
      when:
        - rax.success|length < count

    - name: Instance exists but wasn't created succesfully
      fail:
        msg: |
          This state can occur when an instance fails to build in time.
          The api confirms that the existence exists, but it didn't go
          into the active state within the timeout.

          This state can also occur when trying to boot an instance with the
          same name as an existing instance. In that case the rax module
          sees that the instance exists but it didn't create it. It's important
          to fail in that case so that a job doesn't run on a dirty node.
      when:
        - rax.success|length < count
        - rax.instances|length == count

    - name: Fail if the required number of instances aren't available
      fail:
        msg: "At least one public cloud instance failed to start :("
      when: rax.success|length < count

    - name: Create inventory directory
      file:
        path: "{{inventory_path}}"
        state: directory

    - name: Write inventory
      copy:
        content: |
          [job_nodes:children]
          hosts

          [hosts]
          {% for instance in rax.success %}
          {{instance.name}} ansible_host={{instance.accessIPv4}} ansible_user=root
          {% endfor %}
        dest: '{{inventory_path}}/hosts'

    - name: Wait for SSH to be available on all hosts
      wait_for: port=22 host="{{ item.accessIPv4 }}"
      with_items: "{{ rax.success }}"

    - name: Wait an additional amount of time for any remaning startup tasks to finish
      pause:
        minutes: 5
