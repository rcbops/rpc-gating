---
- hosts: localhost
  connection: local
  gather_facts: False
  vars:
    keyname: "jenkins"
    inventory_path: "{{ lookup('env', 'WORKSPACE') }}/rpc-gating/playbooks/inventory"
    user_data_path: "{{ lookup('env', 'WORKSPACE') }}/rpc-gating/scripts/user_data_pubcloud.sh"
    cloud_name: "public_cloud"
    boot_timeout: "{{ lookup('env', 'BOOT_TIMEOUT') | default(900, true) }}"
  tasks:

    # regions, and fallback_regions should be CSV strings
    # We randomly shuffle them both, then use the first
    # item of the resulting lists for the try/rescue block.

    - name: Create primary region list
      set_fact:
        # replace: replace commas with spaces. Double spaces will be removed by trim or select.
        # split on spaces to produce a list
        # trim: remove spaces from beginning and end of each item
        # upper: convert to upper case
        # select: remove empty strings from the list
        # shuffle: randomise order
        regions_shuff: "{{ (regions|replace(',', ' ')).split()|map('trim')|map('upper')|select|shuffle }}"

    - name: Create fallback region list
      set_fact:
        # difference: ensure that the fallback regions list does not include any items from
        #             the primary regions list
        fallback_regions_shuff: "{{ (fallback_regions|replace(',', ' ')).split()|map('trim')|map('upper')|select|difference(regions_shuff)|shuffle }}"

    - name: Provision a cloud instance
      block:
        - name: Output the primary region list
          debug:
            msg: "Job-provided primary regions: {{ regions }}; Resulting shuffled regions: {{ regions_shuff }}"

        - name: Fail when no primary regions are provided
          fail:
            msg: "No primary regions were provided. Please review job configuration."
          when:
            - regions_shuff | length == 0

        - name: Provision a cloud instance (first primary region)
          os_server:
            name: "{{ instance_name }}"
            flavor: "{{ flavor }}"
            state: present
            cloud: "{{ cloud_name }}"
            region_name: "{{ regions_shuff[0] }}"
            image: "{{ image }}"
            key_name: "{{ keyname }}"
            userdata: "{{ lookup('file', user_data_path) }}"
            config_drive: yes
            meta:
              build_config: core
            wait: yes
            timeout: "{{ boot_timeout }}"
          register: _instance_provision

        - name: Wait for SSH connectivity to the cloud instance (10 min timeout)
          wait_for_connection:
            timeout: 600
            port: 22
            host: "{{ _instance_provision.server.accessIPv4 }}"

      rescue:
        - name: Output the fallback region list
          debug:
            msg: "Job-provided secondary regions: {{ fallback_regions }}; Resulting shuffled regions: {{ fallback_regions_shuff }}"

        - name: Fail when no fallback regions are provided
          fail:
            msg: "No fallback regions were provided. Please review job configuration."
          when:
            - fallback_regions_shuff | length == 0

        - name: Provision a cloud instance (first fallback region)
          os_server:
            name: "{{ instance_name }}"
            flavor: "{{ flavor }}"
            state: present
            cloud: "{{ cloud_name }}"
            region_name: "{{ fallback_regions_shuff[0] }}"
            image: "{{ image }}"
            key_name: "{{ keyname }}"
            userdata: "{{ lookup('file', user_data_path) }}"
            config_drive: yes
            meta:
              build_config: core
            wait: yes
            timeout: "{{ boot_timeout }}"
          register: _instance_provision

        - name: Wait for SSH connectivity to the fallback cloud instance (10 min timeout)
          wait_for_connection:
            timeout: 600
            port: 22
            host: "{{ _instance_provision.server.accessIPv4 }}"

    - name: Show results of instance provision task
      debug:
        var: _instance_provision

    - name: Add Host
      add_host:
        hostname: "singleuseslave"
        ansible_ssh_host: "{{ _instance_provision.server.accessIPv4 }}"

    - name: Create inventory directory
      file:
        path: "{{ inventory_path }}"
        state: directory

    - name: Write inventory
      copy:
        content: |
          [job_nodes:children]
          hosts

          [hosts]
          {{ _instance_provision.server.name }} ansible_host={{ _instance_provision.server.accessIPv4 }} ansible_user=root rax_region={{ _instance_provision.server.region }}
        dest: '{{ inventory_path }}/hosts'

    - name: Show generated inventory
      debug:
        msg: "Generated inventory: {{ lookup('file', inventory_path+'/hosts')}}"

    - name: Wait for startup tasks to finish
      pause:
        minutes: 5

- hosts: singleuseslave
  remote_user: root
  gather_facts: False
  tasks:
    - name: Add apt debug configuration (RE-1758)
      raw: echo 'Debug::Acquire::http "true";' > /etc/apt/apt.conf.d/99debug
      args:
        executable: /bin/bash

    - name: Show apt mirrors (RE-1758)
      raw: >-
        echo "Dumping /etc/apt/sources.list..." &&
        cat /etc/apt/sources.list &&
        for i in `ls /etc/apt/sources.list.d/*`; do echo "Dumping $i..." && cat $i; done
      args:
        executable: /bin/bash

    - name: Update apt cache (RE-1752)
      raw: apt-get update
      args:
        executable: /bin/bash
      register: _update_cache
      until: _update_cache | success
      retries: 3
      delay: 15

    - name: Show the output of the apt cache update (RE-1758)
      debug:
        var: _update_cache

    - name: Check the package candidates (RE-1758)
      raw: apt-cache policy python-minimal python-yaml
      args:
        executable: /bin/bash
      register: _package_candidates

    - name: Show the package candidates (RE-1758)
      debug:
        var: _package_candidates

    - name: Install python packages if python is not present (RLM-275)
      raw: test -e /usr/bin/python || apt-get install -y python-minimal python-yaml
      args:
        executable: /bin/bash
      register: _install_packages
      until: _install_packages | success
      retries: 3
      delay: 15

    - name: Show the output of the apt package install (RE-1758)
      debug:
        var: _install_packages

- hosts: singleuseslave
  tasks:
    - name: Check for thaw hook
      stat:
        path: /gating/thaw/run
      register: thaw

    - name: Execute thaw hook
      shell: |
        set -xeu
        /gating/thaw/run
      args:
        executable: /bin/bash
      when: thaw.stat.exists|bool
