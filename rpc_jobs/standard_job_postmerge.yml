- project:
    name:       "gating-post-merge"
    repo_name:  "rpc-gating"
    repo_url:   "https://github.com/rcbops/rpc-gating"
    branch:     "master"
    image:      "xenial"
    scenario:   "functional"
    action:     "test"
    jira_project_key: "RE"
    trigger_build: "PM_{repo_name}-{branch}-{image}-{scenario}-{action}"
    jobs:
      - 'PM_{repo_name}-{branch}-{image}-{scenario}-{action}'
      - 'PM-push-trigger_{repo_name}-{branch}-{image}-{scenario}-{action}'

# This job is specified as `freestyle` as using a pipeline job with github
# trigger causes the job to be triggered irrespective of which branch was
# pushed to.
- job-template:
    name: "PM-push-trigger_{repo_name}-{branch}-{image}-{scenario}-{action}"
    project-type: freestyle
    scm:
      - git:
          url: "{repo_url}"
          branches:
           - "{branch}"
    properties:
      - build-discarder:
          num-to-keep: 30
    triggers:
        - github
    builders:
      - trigger-builds:
        - project:
            - "{trigger_build}"

- job-template:
    name: 'PM_{repo_name}-{branch}-{image}-{scenario}-{action}'
    branch: "master"
    jira_project_key: ""
    project-type: pipeline
    concurrent: true
    FLAVOR: "performance1-1"
    IMAGE: "Ubuntu 16.04 LTS (Xenial Xerus) (PVHVM)"
    properties:
      - build-discarder:
          num-to-keep: 14
      - github:
          url: "{repo_url}"
    parameters:
      - rpc_gating_params
      - instance_params:
          IMAGE: "{IMAGE}"
          FLAVOR: "{FLAVOR}"
          REGIONS: "{REGIONS}"
          FALLBACK_REGIONS: "{FALLBACK_REGIONS}"
      - string:
          name: REPO_URL
          default: "{repo_url}"
          description: Url of the repo under test
      - string:
          name: BRANCH
          default: "{branch}"
          description: Branch of the repo under test
      - standard_job_params:
          SLAVE_TYPE: "{SLAVE_TYPE}"
          SLAVE_CONTAINER_CUSTOM_DOCKERFILE: "{SLAVE_CONTAINER_CUSTOM_DOCKERFILE}"
    triggers:
      - timed: "@daily"

    dsl: |
      library "rpc-gating@${{RPC_GATING_BRANCH}}"
      common.globalWraps(){{

        env.STAGES="Allocate Resources, Connect Slave, Cleanup, Destroy Slave"

        // Pass details about the job parameters through
        // to the target environment so that scripts can
        // use them to adapt behaviour.
        env.RE_JOB_NAME = "{name}"
        env.RE_JOB_IMAGE = "{image}"
        env.RE_JOB_SCENARIO = "{scenario}"
        env.RE_JOB_ACTION = "{action}"
        env.RE_JOB_FLAVOR = "{FLAVOR}"
        env.RE_JOB_REPO_NAME = "{repo_name}"
        env.RE_JOB_BRANCH = "{branch}"

        // set env.RE_JOB_TRIGGER & env.RE_JOB_TRIGGER_DETAIL
        common.setTriggerVars()


        String credentials = "{credentials}"

        // Not part of the published interface, used by this job later on
        // to create failure tickets in the correct project.
        JIRA_PROJECT_KEY = "{jira_project_key}"

        common.standard_job_slave(env.SLAVE_TYPE) {{
          // Set the default environment variables used
          // by the artifact and test result collection.
          env.RE_HOOK_ARTIFACT_DIR="${{env.WORKSPACE}}/artifacts"
          env.RE_HOOK_RESULT_DIR="${{env.WORKSPACE}}/results"

          // Set the job result default
          currentBuild.result="SUCCESS"

          try {{
            common.withRequestedCredentials(credentials) {{

              stage('Checkout') {{
                common.clone_with_pr_refs(
                  "${{env.WORKSPACE}}/${{env.RE_JOB_REPO_NAME}}",
                  env.REPO_URL,
                  env.BRANCH,
                )
              }} // stage

              stage('Execute Pre Script') {{
                // Retry the 'pre' stage 3 times. The 'pre' stage is considered
                // to be preparation for the test, so let's try and make sure
                // it has the best chance of success possible.
                retry(3) {{
                  sh """#!/bin/bash -xeu
                    cd ${{env.WORKSPACE}}/${{env.RE_JOB_REPO_NAME}}
                    if [[ -e gating/post_merge_test/pre ]]; then
                      gating/post_merge_test/pre
                    fi
                  """
                }}
              }} // stage

              try{{
                stage('Execute Run Script') {{
                  sh """#!/bin/bash -xeu
                    cd ${{env.WORKSPACE}}/${{env.RE_JOB_REPO_NAME}}
                    gating/post_merge_test/run
                  """
                }} // stage
              }} finally {{
                stage('Execute Post Script') {{
                  // We do not want the 'post' execution to fail the test,
                  // but we do want to know if it fails so we make it only
                  // return status.
                  post_result = sh(
                    returnStatus: true,
                    script: """#!/bin/bash -xeu
                               cd ${{env.WORKSPACE}}/${{env.RE_JOB_REPO_NAME}}
                               if [[ -e gating/post_merge_test/post ]]; then
                                 gating/post_merge_test/post
                               fi"""
                  )
                  if (post_result != 0) {{
                    print("Post-Merge Test (post) failed with return code ${{post_result}}")
                  }} // if
                }} // inner try
              }} // stage
            }} // withCredentials
          }} catch (e) {{
            print(e)
            currentBuild.result="FAILURE"
            if (! common.isUserAbortedBuild() && JIRA_PROJECT_KEY != '') {{
              print("Creating build failure issue.")
              common.build_failure_issue(JIRA_PROJECT_KEY)
            }} else {{
              print("Skipping build failure issue creation.")
            }}
            throw e
          }} finally {{
            common.archive_artifacts()
          }} // try
        }} // standard_job_slave
      }} // globalWraps
