- project:
    name:       "gating-post-merge"
    repo_url:   "https://github.com/rcbops/rpc-gating"
    branch:     "master"
    image:      "xenial"
    scenario:   "functional"
    action:     "test"
    jira_project_key: "RE"
    jobs:
      - 'PM_{job_name_prefix}-{branch}-{image}-{scenario}-{action}'

- job-template:
    name: 'PM_{job_name_prefix}-{branch}-{image}-{scenario}-{action}'
    job_name_prefix: "{name}"
    project-type: pipeline
    concurrent: true
    FLAVOR: "performance1-1"
    IMAGE: "Ubuntu 16.04 LTS (Xenial Xerus) (PVHVM)"
    properties:
      - build-discarder:
          num-to-keep: "30"
      - github:
          url: "{repo_url}"
    parameters:
      - rpc_gating_params
      - instance_params:
          IMAGE: "{IMAGE}"
          FLAVOR: "{FLAVOR}"
          REGIONS: "{REGIONS}"
          FALLBACK_REGIONS: "{FALLBACK_REGIONS}"
      - string:
          name: REPO_URL
          default: "{repo_url}"
          description: Url of the repo under test
      - string:
          name: BRANCH
          default: "{branch}"
          description: Branch of the repo under test
    triggers:
      - timed: "@daily"

    dsl: |
      library "rpc-gating@${{RPC_GATING_BRANCH}}"
      properties([pipelineTriggers([githubPush()])])

      env.STAGES="Allocate Resources, Connect Slave, Cleanup, Destroy Slave"

      // Pass details about the job parameters through
      // to the target environment so that scripts can
      // use them to adapt behaviour.
      env.RE_JOB_NAME = "{name}"
      env.RE_JOB_IMAGE = "{image}"
      env.RE_JOB_SCENARIO = "{scenario}"
      env.RE_JOB_ACTION = "{action}"
      env.RE_JOB_FLAVOR = "{FLAVOR}"
      env.RE_JOB_TRIGGER = "PM"
      env.RE_JOB_BRANCH = "{branch}"

      // Not part of the published interface, used by this job later on
      // to create failure tickets in the correct project.
      JIRA_PROJECT_KEY = "{jira_project_key}"

      timeout(time: 6, unit: 'HOURS'){{
        common.shared_slave() {{
          pubcloud.runonpubcloud {{
            // Set the default environment variables used
            // by the artifact and test result collection.
            env.RE_HOOK_ARTIFACT_DIR="${{env.WORKSPACE}}/artifacts"
            env.RE_HOOK_RESULT_DIR="${{env.WORKSPACE}}/results"

            // Set the job result default
            currentBuild.result="SUCCESS"

            try {{
              ansiColor('xterm') {{
                dir("${{env.WORKSPACE}}/${{env.ghprbGhRepository}}") {{
                  withCredentials(common.get_cloud_creds()) {{

                    stage('Checkout') {{
                      git branch: env.BRANCH, url: env.REPO_URL
                    }} // stage

                    stage('Execute Pre Script') {{
                      // Retry the 'pre' stage 3 times. The 'pre' stage is considered
                      // to be preparation for the test, so let's try and make sure
                      // it has the best chance of success possible.
                      retry(3) {{
                        sh """#!/bin/bash -xeu
                          if [[ -e gating/post_merge_test/pre ]]; then
                            gating/post_merge_test/pre
                          fi
                        """
                      }}
                    }} // stage

                    try{{
                      stage('Execute Run Script') {{
                        sh """#!/bin/bash -xeu
                          gating/post_merge_test/run
                        """
                      }} // stage
                    }} finally {{
                      stage('Execute Post Script') {{
                        // We do not want the 'post' execution to fail the test,
                        // but we do want to know if it fails so we make it only
                        // return status.
                        post_result = sh(
                          returnStatus: true,
                          script: """#!/bin/bash -xeu
                                     if [[ -e gating/post_merge_test/post ]]; then
                                       gating/post_merge_test/post
                                     fi"""
                        )
                        if (post_result != 0) {{
                          print("Post-Merge Test (post) failed with return code ${{post_result}}")
                        }} // if
                      }} // inner try
                    }} // stage
                  }} // withCredentials
                }} // dir
              }} // ansiColor
            }} catch (e) {{
              common.create_jira_issue(JIRA_PROJECT_KEY,
                                       env.BUILD_TAG,
                                       env.BUILD_URL,
                                       "Task")
            }} finally {{
              common.archive_artifacts()
            }} // try
          }} // pubcloud slave
        }} // cit node
      }} // timeout
