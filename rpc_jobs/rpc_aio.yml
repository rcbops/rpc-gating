- project:
    name: 'RPC-AIO-Jobs'
    # Note: branch is the branch for periodics to build
    #       branches is the branch pattern to match for PR Jobs.
    series:
      - liberty:
          branch: liberty-12.2
          branches: "liberty-.*"
      - mitaka:
          branch: mitaka-13.1
          branches: "mitaka-.*"
      - newton:
          branch: newton-14.0
          branches: "newton-.*"
      - artifacts:
          branch: artifacts-14.0
          branches: "artifacts-.*"
      - master:
          branch: master
          branches: "master"
    context:
      - swift
      - ceph:
          DEPLOY_SWIFT: "no"
          DEPLOY_CEPH: "yes"
          CONTEXT_USER_VARS: |
            ceph_stable_release: "hammer"
            cinder_cinder_conf_overrides:
                DEFAULT:
                    default_volume_type: ceph
            cinder_service_backup_driver: cinder.backup.drivers.ceph
            tempest_service_available_swift: false
      - upgrade:
          STAGES: >-
            Allocate Resources,
            Connect Slave,
            Prepare Deployment,
            Deploy RPC w/ Script,
            Setup MaaS,
            Verify MaaS,
            Install Tempest,
            Tempest Tests,
            Prepare Kibana Selenium,
            Kibana Tests,
            Holland,
            Upgrade,
            Cleanup,
            Destroy Slave
          UPGRADE_FROM_REF: "liberty-12.2"
      - xenial:
          IMAGE: "Ubuntu 16.04 LTS (Xenial Xerus) (PVHVM)"

    # NOTE: Hugh tested this and found that ztrigger overrides series and
    #       trigger doesn't, which is odd because both trigger and ztrigger
    #       sort after series.
    ztrigger:
      - pr:
          CRON: ""
          TRIGGER_USER_VARS: "maas_use_api: false"
      - periodic:
          branches: "do_not_build_on_pr"
          NUM_TO_KEEP: 10
    exclude:
      - series: liberty
        context: upgrade
      - series: newton
        context: upgrade
      - series: artifacts
        context: upgrade
      - series: master
        context: upgrade
      # Xenial builds are run for newton and above.
      - series: liberty
        context: xenial
      - series: mitaka
        context: xenial
      # Artifacts are currently only built for Trusty
      - series: artifacts
        context: xenial
      # An artifacted ceph deployment is not yet supported
      - series: artifacts
        context: ceph
    jobs:
      - 'RPC-AIO_{series}-{context}-{ztrigger}'

- job-template:
    # DEFAULTS
    STAGES: >-
      Allocate Resources,
      Connect Slave,
      Prepare Deployment,
      Deploy RPC w/ Script,
      Setup MaaS,
      Verify MaaS,
      Install Tempest,
      Tempest Tests,
      Prepare Kibana Selenium,
      Kibana Tests,
      Holland,
      Cleanup,
      Destroy Slave
    branch: master
    NUM_TO_KEEP: 30

    # TEMPLATE
    name: 'RPC-AIO_{series}-{context}-{ztrigger}'
    project-type: workflow
    concurrent: true
    properties:
      - build-discarder:
          num-to-keep: "{NUM_TO_KEEP}"
      - rpc-openstack-github
    parameters:
      # See params.yml
      - rpc_repo_params:
         RPC_BRANCH: "{branch}"
      - rpc_deploy_params:
         DEPLOY_SWIFT: "{DEPLOY_SWIFT}"
         DEPLOY_CEPH: "{DEPLOY_CEPH}"
         DEPLOY_ELK: "{DEPLOY_ELK}"
         USER_VARS: |
           {CONTEXT_USER_VARS}
           {SERIES_USER_VARS}
           {TRIGGER_USER_VARS}
         UPGRADE_FROM_REF: "{UPGRADE_FROM_REF}"
      - rpc_gating_params
      - single_use_slave_params:
         IMAGE: "{IMAGE}"
         FLAVOR: "{FLAVOR}"
         REGION: "{REGION}"
      - tempest_params:
         TEMPEST_TEST_SETS: "scenario defcore cinder_backup"
         RUN_TEMPEST_OPTS: "--serial"
         TESTR_OPTS: ""
      - string:
          name: STAGES
          default: "{STAGES}"
          description: |
            Pipeline stages to run CSV. Note that this list does not influence execution order.
            Options:
              Allocate Resources
              Connect Slave
              Prepare Deployment
              Deploy RPC w/ Script
              Setup MaaS
              Verify MaaS
              Install Tempest
              Tempest Tests
              Prepare Kibana Selenium
              Kibana Tests
              Holland (test holland mysql backup)
              Upgrade
              Pause (use to hold instance for investigation before cleanup)
              Cleanup
              Destroy Slave
    triggers:
      - timed: "{CRON}"
      - github-pull-request:
          org-list:
            - rcbops
          github-hooks: true
          trigger-phrase: '.*recheck_cit_all.*|.*recheck_cit_{context}.*'
          only-trigger-phrase: false
          white-list-target-branches:
            - "{branches}"
          auth-id: "github_account_rpc_jenkins_svc"
          status-context: 'CIT/{context}'
          cancel-builds-on-update: true

    dsl: |
      // CIT Slave node
      currentBuild.result = 'SUCCESS'
      timeout(time: 8, unit: 'HOURS'){{
        node() {{
          dir("rpc-gating") {{
              git branch: env.RPC_GATING_BRANCH, url: env.RPC_GATING_REPO
              common = load 'pipeline_steps/common.groovy'
              pubcloud = load 'pipeline_steps/pubcloud.groovy'
              aio_prepare = load 'pipeline_steps/aio_prepare.groovy'
              deploy = load 'pipeline_steps/deploy.groovy'
              tempest = load 'pipeline_steps/tempest.groovy'
              holland = load 'pipeline_steps/holland.groovy'
              maas = load 'pipeline_steps/maas.groovy'
              kibana = load 'pipeline_steps/kibana.groovy'
          }}
          // We need to checkout the rpc-openstack repo on the CIT Slave
          // so that we can cater for builds on the more restricted images
          // used for artifact-based builds.
          if (env.STAGES.contains("Upgrade")) {{
            common.prepareRpcGit(env.UPGRADE_FROM_REF, env.WORKSPACE)
          }} else {{
            common.prepareRpcGit("auto", env.WORKSPACE)
          }} // if
          if(common.is_doc_update_pr("${{env.WORKSPACE}}/rpc-openstack")){{
            return
          }}
          pubcloud.runonpubcloud {{
            // try within pubcloud node so we can archive archive_artifacts
            // after a failure, before the node is cleaned up.
            try {{
              environment_vars = [
                "DEPLOY_HAPROXY=yes",
                "DEPLOY_AIO=no",
                "DEPLOY_MAAS=no",
                "DEPLOY_TEMPEST=no",
                "DEPLOY_SWIFT=${{DEPLOY_SWIFT}}",
                "DEPLOY_CEPH=${{DEPLOY_CEPH}}",
                "DEPLOY_ELK=${{DEPLOY_ELK}}",
                ]
              aio_prepare.prepare()
              deploy.deploy_sh(environment_vars: environment_vars)
              deploy.addChecksumRule()
              maas.deploy()
              maas.verify()
              tempest.tempest()
              kibana_branch = env.UPGRADE_FROM_REF ?: env.RPC_BRANCH
              kibana.kibana(kibana_branch)
              holland.holland()
              if (env.STAGES.contains("Upgrade")) {{
                deploy.upgrade(environment_vars: environment_vars)
                deploy.addChecksumRule()
                maas.deploy()
                maas.verify()
                tempest.tempest()
                kibana.kibana(env.RPC_BRANCH)
                holland.holland()
              }}
            }} catch (e) {{
              print(e)
              currentBuild.result = 'FAILURE'
              throw e
            }} finally {{
              common.archive_artifacts()
              common.safe_jira_comment("${{currentBuild.result}}: [${{env.BUILD_TAG}}|${{env.BUILD_URL}}]")
            }}
          }} //pubcloud slave
        }} // cit node
      }} // timeout
