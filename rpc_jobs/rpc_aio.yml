- project:
    name: 'RPC-AIO-Jobs'
    # Note: branch is the branch for periodics to build
    #       branches is the branch pattern to match for PR Jobs.
    series:
      - kilo:
          branch: kilo
          branches: "kilo.*"
          DEPLOY_TELEGRAF: "yes"
      - liberty:
          branch: liberty-12.2
          branches: "liberty-.*"
      - mitaka:
          branch: mitaka-13.1
          branches: "mitaka-.*"
          MAJOR_UPGRADE_FROM_REF: "liberty-12.2"
      - newton:
          branch: newton
          branches: "newton"
          LEAPFROG_UPGRADE_FROM_REF: "kilo"
          # NOTE: This branch is TBD
          MINOR_UPGRADE_FROM_REF: "newton-14.2"
          DEPLOY_TELEGRAF: "yes"
      - newton141:
          branch: newton-14.1
          branches: "newton-14.1.*"
          LEAPFROG_UPGRADE_FROM_REF: "kilo"
          MINOR_UPGRADE_FROM_REF: "r14.0.1"
          DEPLOY_TELEGRAF: "yes"
      - master:
          branch: master
          branches: "master"
          DEPLOY_TELEGRAF: "yes"
    image:
      - trusty:
          IMAGE: "Ubuntu 14.04.5 LTS prepared for RPC deployment"
      - xenial:
          IMAGE: "Ubuntu 16.04.2 LTS prepared for RPC deployment"
    action:
      - deploy:
          ACTION_STAGES: >-
            Install Tempest,
            Tempest Tests,
            Prepare Kibana Selenium,
            Kibana Tests
      - majorupgrade:
          ACTION_STAGES: >-
            Install Tempest,
            Tempest Tests,
            Prepare Kibana Selenium,
            Kibana Tests,
            Major Upgrade
      # A minimum set of stages is chosen deliberately
      # to test the convergance of the upgrade itself
      # without additional complexity. Once this is
      # working well, additional stages may be added.
      - leapfrogupgrade:
          ACTION_STAGES: >-
            Leapfrog Upgrade,
            Install Tempest,
            Tempest Tests,
            Prepare Kibana Selenium,
            Kibana Tests
          GENERATE_TEST_NETWORKS: "6"
          GENERATE_TEST_SERVERS: "4"
          GENERATE_TEST_VOLUMES: "12"
      # A minimum set of stages is chosen deliberately
      # to test the convergance of the upgrade itself
      # without additional complexity. Once this is
      # working well, additional stages may be added.
      - minorupgrade:
          ACTION_STAGES: >-
            Minor Upgrade
    scenario:
      - swift
      - ceph:
          DEPLOY_SWIFT: "no"
          DEPLOY_CEPH: "yes"
          CONTEXT_USER_VARS: |
            ceph_stable_release: "hammer"
            cinder_cinder_conf_overrides:
                DEFAULT:
                    default_volume_type: ceph
            cinder_service_backup_driver: cinder.backup.drivers.ceph
            tempest_service_available_swift: false

    # NOTE: Hugh tested this and found that ztrigger overrides series and
    #       trigger doesn't, which is odd because both trigger and ztrigger
    #       sort after series.
    ztrigger:
      - pr:
          CRON: ""
          TRIGGER_USER_VARS: "maas_use_api: false"
      - periodic:
          branches: "do_not_build_on_pr"
          NUM_TO_KEEP: 10
          TRIGGER_STAGES: >-
            Holland
          DEPLOY_SUPPORT_ROLE: "yes"
    exclude:
      # Minor upgrades are only being executed
      # for r14.0.1->newton141 for now until
      # the minor upgrade testing process is
      # stabilised.
      - series: kilo
        action: minorupgrade
      - series: liberty
        action: minorupgrade
      - series: mitaka
        action: minorupgrade
      - series: master
        action: minorupgrade
      # Major upgrades are only run for mitaka
      # for the moment as no other major upgrade
      # testing or tooling has been implemented.
      - series: kilo
        action: majorupgrade
      - series: liberty
        action: majorupgrade
      - series: newton
        action: majorupgrade
      - series: newton141
        action: majorupgrade
      - series: master
        action: majorupgrade
      # Xenial builds are run for newton and above
      # as it is not supported distro before newton.
      - series: kilo
        image: xenial
      - series: liberty
        image: xenial
      - series: mitaka
        image: xenial
      # Leapfrog upgrades are only run for kilo --> newton141
      # as the upgrade method is not supported for any
      # other target series.
      # the kilo --> newton141 job is triggered by PRs to either branch.
      - series: liberty
        action: leapfrogupgrade
      - series: mitaka
        action: leapfrogupgrade
      - series: master
        action: leapfrogupgrade
      # This combo tests the same thing as
      # RPC-AIO_newton141-trusty-leapfrogupgrade-swift-periodic and is not
      # needed
      #- series: kilo
      #  action: leapfrogupgrade
      #  trigger: periodic
      # Leapfrog upgrades cannot be executed on
      # xenial as it is not possible to install
      # the source series (kilo-mitaka) on xenial.
      - image: xenial
        action: leapfrogupgrade
      # Ceph builds are not run for kilo at this time
      # as ceph deployment is not supported for
      # newton (yet) and the purpose of executing
      # kilo builds is for the leapfrog upgrade tests.
      - series: kilo
        scenario: ceph
      # Ceph cluster builds are not supported for
      # newton. In the future ceph will be a supported
      # scenario for newton onwards, but it will only
      # consume the cluster, not deploy it. At that
      # time the scenario can be added back again.
      - series: newton
        scenario: ceph
      - series: newton141
        scenario: ceph
      # Ceph builds are not tested for leapfrog upgrades
      # at this time due to the failure for ceph to
      # install on kilo.
      - action: leapfrogupgrade
        scenario: ceph
      # Ceph builds are not tested for minor upgrades
      # at this time due to the minor upgrades only being
      # targeted at newton or above, which do not support
      # the ceph scenario.
      - action: minorupgrade
        scenario: ceph
      # Ceph builds are not run for Xenial at this time
      # as ceph cluster deployment is not supported for
      # Xenial using RPC-O.
      - image: xenial
        scenario: ceph
      # Trusty builds are not executed for master
      # as Trusty is not a supported distro for
      # Ocata onwards.
      - series: master
        image: trusty
    jobs:
      - 'RPC-AIO_{series}-{image}-{action}-{scenario}-{ztrigger}'

- job-template:
    # DEFAULTS
    DEFAULT_STAGES: >-
      Allocate Resources,
      Connect Slave,
      Prepare Deployment,
      Deploy RPC w/ Script,
      Cleanup,
      Destroy Slave
    ACTION_STAGES: ""
    TRIGGER_STAGES: ""
    branch: master
    NUM_TO_KEEP: 30
    IMAGE: "Ubuntu 14.04.5 LTS prepared for RPC deployment"
    DEPLOY_MAAS: "yes"
    DEPLOY_TELEGRAF: "NO"
    DEPLOY_INFLUX: "NO"
    # TEMPLATE
    name: 'RPC-AIO_{series}-{image}-{action}-{scenario}-{ztrigger}'
    project-type: workflow
    concurrent: true
    properties:
      - build-discarder:
          num-to-keep: "{NUM_TO_KEEP}"
      - rpc-openstack-github
    parameters:
      # See params.yml
      - kibana_selenium_params:
          KIBANA_SELENIUM_BRANCH: "{branch}"
      - rpc_repo_params:
          RPC_BRANCH: "{branch}"
      - rpc_deploy_params:
          DEPLOY_SWIFT: "{DEPLOY_SWIFT}"
          DEPLOY_CEPH: "{DEPLOY_CEPH}"
          DEPLOY_ELK: "{DEPLOY_ELK}"
          DEPLOY_SUPPORT_ROLE: "{DEPLOY_SUPPORT_ROLE}"
          DEPLOY_MAAS: "{DEPLOY_MAAS}"
          USER_VARS: |
            {CONTEXT_USER_VARS}
            {SERIES_USER_VARS}
            {TRIGGER_USER_VARS}
          UPGRADE_FROM_REF: "{UPGRADE_FROM_REF}"
      - rpc_gating_params
      - tigkstack_params:
          DEPLOY_TELEGRAF: "{DEPLOY_TELEGRAF}"
          DEPLOY_INFLUX: "{DEPLOY_INFLUX}"
      - instance_params:
          IMAGE: "{IMAGE}"
          FLAVOR: "{FLAVOR}"
          REGION: "{REGION}"
      - string:
          name: STAGES
          default: "{DEFAULT_STAGES}, {ACTION_STAGES}, {TRIGGER_STAGES}"
          description: |
            Pipeline stages to run CSV. Note that this list does not influence execution order.
            Options:
              Allocate Resources
              Connect Slave
              Prepare Deployment
              Deploy RPC w/ Script
              Install Tempest
              Tempest Tests
              Prepare Kibana Selenium
              Kibana Tests
              Holland (test holland mysql backup)
              Minor Upgrade
              Major Upgrade
              Leapfrog Upgrade
              Pause (use to hold instance for investigation before cleanup)
              Cleanup
              Destroy Slave
      - generate_test_params:
          GENERATE_TEST_NETWORKS: "{GENERATE_TEST_NETWORKS}"
          GENERATE_TEST_SERVERS: "{GENERATE_TEST_SERVERS}"
          GENERATE_TEST_VOLUMES: "{GENERATE_TEST_VOLUMES}"
    triggers:
      - timed: "{CRON}"
      - github-pull-request:
          org-list:
            - rcbops
          github-hooks: true
          trigger-phrase: '.*recheck_cit_all.*|.*recheck_cit_{image}_{action}_{scenario}.*'
          only-trigger-phrase: false
          white-list-target-branches:
            - "{branches}"
          auth-id: "github_account_rpc_jenkins_svc"
          status-context: 'CIT/{image}-{action}-{scenario}'
          cancel-builds-on-update: true

    dsl: |
      library "rpc-gating@${{RPC_GATING_BRANCH}}"
      currentBuild.result = 'SUCCESS'
      // pass JJB axes through to environment
      env.SCENARIO = "{scenario}"
      env.TRIGGER = "{ztrigger}"
      env.TARGET = "aio"
      env.ACTION = "{action}"
      env.SERIES = "{series}"
      timeout(time: 8, unit: 'HOURS'){{
        common.shared_slave() {{
          try {{
            // This sets kibana_branch based on STAGES
            // Note that we do this before the block below since
            // env.UPGRADE_FROM_ENV may get overwritten
            if (env.STAGES.contains("Minor Upgrade")) {{
              env.UPGRADE_FROM_REF = env.MINOR_UPGRADE_FROM_REF
              kibana_branch        = env.MINOR_UPGRADE_FROM_REF
            }} else if (env.STAGES.contains("Major Upgrade")) {{
              env.UPGRADE_FROM_REF = env.MAJOR_UPGRADE_FROM_REF
              kibana_branch        = env.MAJOR_UPGRADE_FROM_REF
            }} else if (env.STAGES.contains("Leapfrog Upgrade")) {{
              env.UPGRADE_FROM_REF = env.LEAPFROG_UPGRADE_FROM_REF
              kibana_branch        = env.LEAPFROG_UPGRADE_FROM_REF
            }} else {{
              kibana_branch = env.KIBANA_SELENIUM_BRANCH
            }}

            // prepare vars for leapfrog upgrade test of changes proposed to kilo
            // this is a special case as we only usually test upgrades on
            // changes to the destination branch.
            if (env.SERIES == "kilo"
                && env.TRIGGER == "pr"
                && env.ACTION == "leapfrogupgrade" ){{
              env.UPGRADE_FROM_REF       = "origin/pr/${{env.ghprbPullId}}/merge"
              kibana_branch              = "kilo"
              env.KIBANA_SELENIUM_BRANCH = "newton-14.1"
            }}

            // We need to checkout the rpc-openstack repo on the CIT Slave
            // so that we can check whether the patch is a docs-only patch
            // before allocating resources unnecessarily.
            common.prepareRpcGit("auto", env.WORKSPACE)
            if(common.is_doc_update_pr("${{env.WORKSPACE}}/rpc-openstack")){{
              return
            }}

            // Adds maas token and url to environment
            // without adding another level of nesting
            maas.add_maas_env_vars()
            pubcloud.runonpubcloud {{
              // try within pubcloud node so we can archive archive_artifacts
              // after a failure, before the node is cleaned up.
              try {{
                environment_vars = [
                  "DEPLOY_HAPROXY=yes",
                  "DEPLOY_AIO=no",
                  "DEPLOY_TEMPEST=no",
                  "DEPLOY_SWIFT=${{DEPLOY_SWIFT}}",
                  "DEPLOY_CEPH=${{DEPLOY_CEPH}}",
                  "DEPLOY_ELK=${{DEPLOY_ELK}}",
                  "DEPLOY_SUPPORT_ROLE=${{DEPLOY_SUPPORT_ROLE}}",
                  ]
                aio_prepare.prepare()
                deploy.deploy_sh(environment_vars: environment_vars)
                tempest.tempest()
                kibana.kibana(kibana_branch)
                holland.holland()
                if (env.STAGES.contains("Minor Upgrade")) {{
                  deploy.upgrade_minor(environment_vars: environment_vars)
                }} else if (env.STAGES.contains("Major Upgrade")) {{
                  deploy.upgrade_major(environment_vars: environment_vars)
                  tempest.tempest()
                  kibana.kibana(env.KIBANA_SELENIUM_BRANCH)
                  holland.holland()
                }} else if (env.STAGES.contains("Leapfrog Upgrade")) {{
                  deploy.upgrade_leapfrog(environment_vars: environment_vars)
                  tempest.tempest()
                  kibana.kibana(env.KIBANA_SELENIUM_BRANCH)
                }}
              }} catch (e) {{
                print(e)
                currentBuild.result = 'FAILURE'
                throw e
              }} finally {{
                common.archive_artifacts()
                common.safe_jira_comment("${{currentBuild.result}}: [${{env.BUILD_TAG}}|${{env.BUILD_URL}}]")
              }}
            }} //pubcloud slave
          }} finally {{
            common.delete_workspace()
          }}
        }} // cit node
      }} // timeout
