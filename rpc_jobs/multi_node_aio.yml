- project:
    name: 'Multi-Node-AIO-Jobs'
    series:
      - mitaka:
          branch: mitaka-13.1
          USER_VARS: |
            tempest_test_sets: 'scenario defcore api heat_api smoke'
      - newton140:
          branch: newton-14.0
          USER_VARS: |
            tempest_test_sets: 'all'
      - newton141:
          branch: newton-14.1
          USER_VARS: |
            tempest_test_sets: 'all'
      - ocata150:
          branch: ocata-15.0
          USER_VARS: ""
      - master:
          branch: master
          USER_VARS: |
            tempest_test_sets: 'all'
    context:
      - xenial:
          DEFAULT_IMAGE: "16.04.2"
      - trusty:
          DEFAULT_IMAGE: "14.04.5"
    trigger:
      - periodic:
          CRON: "H H(0-8) * * 1-5"
      - post-merge:
          CRON: ""
    exclude:
      - series: mitaka
        context: xenial
      # Ocata onwards does not support trusty, so these jobs are excluded
      - series: ocata150
        context: trusty
      - series: master
        context: trusty
    jobs:
      - 'OnMetal-Multi-Node-AIO_{series}-{context}-{trigger}'
      - 'OnMetal-Multi-Node-AIO-Merge-Trigger_{series}'

- job-template:
    name: 'OnMetal-Multi-Node-AIO-Merge-Trigger_{series}'
    project-type: workflow
    properties:
      - build-discarder:
          days-to-keep: 7
      - rpc-openstack-github
    concurrent: true
    triggers:
      - github
    dsl: |
      node(){{
        stage('OnMetal Multi-Node AIO') {{
          git branch: "{branch}", url: "https://github.com/rcbops/rpc-openstack"
          if("{series}" == "mitaka"){{
            build job: 'OnMetal-Multi-Node-AIO_mitaka-trusty-post-merge'
          }} else {{
            build job: 'OnMetal-Multi-Node-AIO_{series}-xenial-post-merge'
          }}
        }} // stage
        stage('Push to rpc-openstack'){{
         sshagent (credentials:['rpc-jenkins-svc-github-ssh-key']){{
           sh """
             mkdir -p ~/.ssh
             ssh-keyscan github.com >> ~/.ssh/known_hosts
             git push -f git@github.com:rcbops/rpc-openstack HEAD:omna-approved-{series}
             """
         }} // sshagent
        }} // stage
      }} // node

- job-template:
    name: 'OnMetal-Multi-Node-AIO_{series}-{context}-{trigger}'
    project-type: workflow
    properties:
      - build-discarder:
          days-to-keep: 7
      - rpc-openstack-github
    concurrent: true
    triggers:
      - timed: "{CRON}"
    parameters:
      - kibana_selenium_params:
          KIBANA_SELENIUM_BRANCH: "{branch}"
      - rpc_gating_params
      - instance_params:
          IMAGE: "OnMetal - Ubuntu 14.04 LTS (Trusty Tahr)"
          FLAVOR: "onmetal-io1"
          REGION: "IAD"
      - rpc_repo_params:
          RPC_BRANCH: "{branch}"
      - osa_ops_params:
          DEFAULT_IMAGE: "{DEFAULT_IMAGE}"
          DATA_DISK_DEVICE: "sdb"
      - text:
          name: "USER_VARS"
          default: "{USER_VARS}"
          description: "OSA/RPC USER_VARS to inject for this build"
      - string:
          name: STAGES
          default: |
            Allocate Resources, Connect Slave, Prepare Multi-Node AIO,
             Prepare RPC Configs, Deploy RPC w/ Script, Prepare MaaS,
             Setup MaaS, Verify MaaS, Install Tempest, Tempest Tests,
             Prepare Kibana Selenium, Kibana Tests, Holland, Cleanup,
             Destroy Slave
          description: |
            Pipeline stages to run CSV. Note that this list does not influence execution order.
            Options:
              Allocate Resources
              Connect Slave
              Prepare Multi-Node AIO
              Prepare RPC Configs
              Deploy RPC w/ Script
              Prepare MaaS
              Setup MaaS
              Verify MaaS
              Install Tempest
              Tempest Tests
              Prepare Horizon Selenium
              Horizon Tests
              Prepare Kibana Selenium
              Kibana Tests
              Holland
              Pause (use to hold instance for investigation before cleanup)
              Cleanup
              Destroy Slave

    dsl: |
      node(){{
        try {{
          dir("rpc-gating"){{
            git branch: env.RPC_GATING_BRANCH, url: env.RPC_GATING_REPO
            pubCloudSlave = load 'pipeline_steps/pubcloud.groovy'
            ssh_slave = load 'pipeline_steps/ssh_slave.groovy'
            common = load 'pipeline_steps/common.groovy'
            multi_node_aio_prepare = load 'pipeline_steps/multi_node_aio_prepare.groovy'
            deploy = load 'pipeline_steps/deploy.groovy'
            maas = load 'pipeline_steps/maas.groovy'
            tempest = load 'pipeline_steps/tempest.groovy'
            horizon = load 'pipeline_steps/horizon.groovy'
            kibana = load 'pipeline_steps/kibana.groovy'
            holland = load 'pipeline_steps/holland.groovy'
            github = load 'pipeline_steps/github.groovy'
          }}
          instance_name = common.gen_instance_name()
          deploy_node = null
          pubCloudSlave.getPubCloudSlave(instance_name: instance_name)

          node(instance_name){{
            multi_node_aio_prepare.prepare()
            instance_ip = sh(script: "ip route get 1 | awk '{{print \$NF;exit}}'", returnStdout: true)
          }} // public cloud node

          deploy_node = "${{instance_name}}-deploy-vm"
          multi_node_aio_prepare.connect_deploy_node(deploy_node, instance_ip)

          node(deploy_node){{
            deploy.deploy_sh(
              environment_vars: [
                "DEPLOY_HAPROXY=yes",
                "DEPLOY_ELK=yes",
                "DEPLOY_TEMPEST=no",
                "DEPLOY_AIO=no",
                "DEPLOY_MAAS=no"
                ]
            ) // deploy_sh
            dir("rpc-gating"){{
              // Checkout rpc-gating repo to avoid race conditions in parallel steps
              git branch: env.RPC_GATING_BRANCH, url: env.RPC_GATING_REPO
            }}
            parallel(
              "maas": {{
                maas.prepare(instance_name: instance_name)
                maas.deploy()
                maas.verify()
              }},
              "tempest": {{
                tempest.tempest()
              }},
              "horizon": {{
                horizon.horizon_integration()
              }},
              "kibana": {{
                kibana.kibana(env.KIBANA_SELENIUM_BRANCH)
              }},
              "holland": {{
                holland.holland()
              }}
            ) // parallel
          }}// deploy node on public cloud node
        }} catch (e){{
            currentBuild.result = 'FAILURE'
            if("{trigger}" == "post-merge"){{
              common.create_jira_issue()
            }}
            throw e
        }} finally {{
            pubCloudSlave.delPubCloudSlave(instance_name: instance_name)
            maas.entity_cleanup(instance_name: instance_name)
            if(deploy_node != null){{
              ssh_slave.destroy(deploy_node)
            }}
            common.delete_workspace()
        }}
      }} // cit node
