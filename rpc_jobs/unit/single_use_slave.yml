- job:
    name: RE-unit-test-slave-types
    project-type: workflow
    concurrent: true
    properties:
      - build-discarder:
          num-to-keep: 30
    parameters:
      # Default params are provided by macro, add any extra params, or
      # params you want to override the defaults for.
      - instance_params:
          IMAGE: "Ubuntu 16.04 LTS (Xenial Xerus) (PVHVM)"
          FLAVOR: "performance1-1"
          REGIONS: "DFW ORD"
          FALLBACK_REGIONS: "IAD"
      - rpc_gating_params
      - standard_job_params:
          SLAVE_TYPE: "instance"
          SLAVE_CONTAINER_CUSTOM_DOCKERFILE: false
      - string:
          name: STAGES
          default: "Allocate Resources, Connect Slave, Cleanup, Destroy Slave"
          description: |
            Pipeline stages to run CSV. Note that this list does not influence execution order.
            Options:
              Allocate Resources
              Connect Slave
              Pause (use to hold instance for investigation before cleanup)
              Cleanup
              Destroy Slave
    dsl: |
      library "rpc-gating@${RPC_GATING_BRANCH}"

      common.globalWraps(){
        // NOTE(mattt): These vars are required in common.standard_job_slave()
        // when this job is testing a custom dockerfile.
        env.REPO_URL = "https://github.com/rcbops/rpc-gating"
        env.BRANCH = "${RPC_GATING_BRANCH}"
        env.RE_JOB_REPO_NAME = "rpc-gating"

        common.standard_job_slave(env.SLAVE_TYPE){
          String virt_type = sh(script: """#!/bin/bash
            systemd-detect-virt
          """, returnStdout: true).trim()

          sh """
            echo "I'm a ${env.SLAVE_TYPE} slave, running ${virt_type}"
          """

          // NOTE(mattt): If env.SLAVE_TYPE is set to an unrecognized type, an
          // exception will be raised in common.standard_job_slave()
          stage("Ensure virt type matches env.SLAVE_TYPE") {
            if (env.SLAVE_TYPE == "instance") {
              assert virt_type == "xen"
            } else {
              assert virt_type == "docker"
            }
          }
        }
      }
