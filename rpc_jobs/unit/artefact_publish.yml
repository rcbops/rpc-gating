- job:
    name: RE-unit-test-artefact-publication
    project-type: pipeline
    concurrent: true
    properties:
      - build-discarder:
          num-to-keep: 10
    parameters:
      - rpc_gating_params
      - standard_job_params:
          SLAVE_TYPE: "container"
          SLAVE_CONTAINER_DOCKERFILE_REPO: "RE"
          SLAVE_CONTAINER_DOCKERFILE_PATH: "./Dockerfile.standard_job"
          SLAVE_CONTAINER_DOCKERFILE_BUILD_ARGS: "BASE_IMAGE=ubuntu:16.04"
          hold_on_error: "0"
    dsl: |
      library "rpc-gating@${RPC_GATING_BRANCH}"
      common.globalWraps(){
        // NOTE(mattt): These vars are required in common.standard_job_slave()
        // when this job is testing a custom dockerfile.
        env.REPO_URL = "https://github.com/rcbops/rpc-gating"
        env.BRANCH = "${RPC_GATING_BRANCH}"
        env.RE_JOB_REPO_NAME = "rpc-gating"

        common.standard_job_slave(env.SLAVE_TYPE){
          // ARA placeholder included to test that an ARA
          // link is added to the sidebar of the index page
          // when an ARA report is present.
          sh """
            mkdir -p artifacts
            mkdir -p artifacts_report
            mkdir -p artifacts/localhost/host/openstack/log/ara-report
            echo "<html>ara report placeholder</html>" \
              > artifacts/localhost/host/openstack/log/ara-report/index.html;
            date > artifacts/datestamp
            hostname > artifacts/hostname
            echo "<html>dstat report placeholder</html>" \
              > /var/log/dstat.html
            cp -vr /var/log artifacts
            cp -r artifacts file_artifacts_dest
            cp -r artifacts file_artifacts_no_dest
          """

          // Create a temporary component_metadata file
          def artifacts_data = [
            artifacts: [
              [
                type: "file",
                source: "${env.WORKSPACE}/file_artifacts_dest",
                dest: "${env.JOB_NAME}/${env.BUILD_NUMBER}",
                expire_after: 86400
              ],
              [
                type: "file",
                source: "${env.WORKSPACE}/file_artifacts_no_dest",
                expire_after: 86400
              ]
            ]
          ]
          String componentMetadataFilename = "${env.WORKSPACE}/${env.RE_JOB_REPO_NAME}/component_metadata.yml"
          // writeYaml will fail if the file already exists
          sh "rm -f ${componentMetadataFilename}"
          writeYaml file: componentMetadataFilename, data: artifacts_data
          common.archive_artifacts(artifact_types: "all", jiraProjectKey: null, throwExceptionOnArchiveFailure: true)
        } // standard_job_slave
      } // globalWraps
