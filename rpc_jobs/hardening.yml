- project:
    name: 'RPC-Hardening-Jobs'
    series:
      - master:
          branch: newton
          USER_VARS: |
            tempest_test_sets: 'scenario'
    context:
      - xenial:
          DEFAULT_IMAGE: "ubuntu-16.04-amd64"
    trigger:
      - periodic:
          CRON: "0 2 * * 7"
    jobs:
      - 'RPC-Hardening_{series}-{context}-{trigger}'

- job-template:
    name: 'RPC-Hardening_{series}-{context}-{trigger}'
    project-type: workflow
    properties:
      - build-discarder:
          days-to-keep: 7
      - rpc-openstack-github
    concurrent: true
    triggers:
      - timed: "{CRON}"
    parameters:
      - rpc_gating_params
      - instance_params:
          IMAGE: "OnMetal - Ubuntu 14.04 LTS (Trusty Tahr)"
          FLAVOR: "onmetal-io1"
          REGIONS: "IAD"
          FALLBACK_REGIONS: ""
      - rpc_repo_params:
          RPC_BRANCH: "{branch}"
      - osa_ops_params:
          DEFAULT_IMAGE: "{DEFAULT_IMAGE}"
          DATA_DISK_DEVICE: "sdb"
          ADDITIONAL_COMPUTE_NODES: "{ADDITIONAL_COMPUTE_NODES}"
          ADDITIONAL_VOLUME_NODES: "{ADDITIONAL_VOLUME_NODES}"
      - text:
          name: "USER_VARS"
          default: "{USER_VARS}"
          description: "OSA/RPC USER_VARS to inject for this build"
      - string:
          name: STAGES
          default: |
            Allocate Resources, Connect Slave, Prepare Multi-Node AIO,
             Prepare RPC Configs, Deploy RPC w/ Script, Install Tempest,
             Tempest Tests, Cleanup, Destroy Slave
          description: |
            Pipeline stages to run CSV. Note that this list does not influence execution order.
            Options:
              Allocate Resources
              Connect Slave
              Prepare Multi-Node AIO
              Prepare RPC Configs
              Deploy RPC w/ Script
              Prepare MaaS
              Install Tempest
              Tempest Tests
              Prepare Horizon Selenium
              Horizon Tests
              Prepare Kibana Selenium
              Kibana Tests
              Pause (use to hold instance for investigation before cleanup)
              Cleanup
              Destroy Slave

    dsl: |
      library "rpc-gating@${{RPC_GATING_BRANCH}}"
      common.shared_slave(){{
        try {{
          common.internal_slave(){{
            withCredentials([
              string(
                credentialsId: 'hardening_repo_url',
                variable: 'HARDENING_REPO'
              )
            ]){{
              dir("RPC-Unified-Gating") {{
                git branch: "master", url: env.HARDENING_REPO, credentialsId: 'rpc-jenkins-svc-github-key'
              }} // dir
            }} // withCred
            stash includes: 'RPC-Unified-Gating/', name: 'RPC-Unified-Gating'
          }} // CentOS node

          instance_name = common.gen_instance_name()
          deploy_node = null
          pubcloud.getPubCloudSlave(instance_name: instance_name)

          common.use_node(instance_name){{
            multi_node_aio_prepare.prepare()
            instance_ip = sh(script: "ip route get 1 | awk '{{print \$NF;exit}}'", returnStdout: true)
          }} // public cloud node

          deploy_node = "${{instance_name}}-infra1-vm"
          multi_node_aio_prepare.connect_deploy_node(deploy_node, instance_ip)

          common.use_node(deploy_node){{
            deploy.deploy_sh(
              environment_vars: [
                "DEPLOY_HAPROXY=yes",
                "DEPLOY_ELK=yes",
                "DEPLOY_TEMPEST=no",
                "DEPLOY_AIO=no",
                "DEPLOY_MAAS=no"
                ]
            ) // deploy_sh
            // Do quick tempest test to ensure environment is operational
            tempest.tempest()
            stage("Run hardening scripts"){{
              unstash 'RPC-Unified-Gating'
              dir("RPC-Unified-Gating"){{
                sh """#!/bin/bash
                bash ./run_tests.sh
                """
              }} // dir
            }} // stage
          }} // deploy node on public cloud node
        }} catch (e){{
            currentBuild.result = 'FAILURE'
            throw e
        }} finally {{
            pubcloud.delPubCloudSlave(instance_name: instance_name)
            if(deploy_node != null){{
              ssh_slave.destroy(deploy_node)
            }}
        }}
      }} // cit node
