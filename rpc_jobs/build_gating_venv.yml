- job:
    name: Build-Gating-Venv
    project-type: workflow
    concurrent: true
    properties:
      - rpc-gating-github
      - build-discarder:
          days-to-keep: 7
    triggers:
      - github # triggered post merge, not on PR
    parameters:
      - rpc_gating_params
    dsl: |
      library "rpc-gating@${RPC_GATING_BRANCH}"
      timestamps {
        // common.shared_slave(){
        // can't use common.shared_slave as it calls install_ansible,
        // which calls this job.
        // can't use globalWraps because it calls common.shared_slave
        node('pubcloud_multiuse'){
          try{
            withCredentials(artifact_build.get_rpc_repo_creds()) {

              deleteDir()
              common.clone_with_pr_refs('rpc-gating',
                                        'git@github.com:rcbops/rpc-gating',
                                        env.RPC_GATING_BRANCH)
              dir('rpc-gating'){
                // run in docker to ensure all the required apt packages are available
                container = docker.build(env.BUILD_TAG.toLowerCase())
              }

              // Venv is built within docker, includes all the environment variables
              container.inside{
                sshagent(credentials:['rpc_repo_ssh_user_private_key']){
                  sh """#!/bin/bash -xeu

                    # The repo path
                    REPO_PATH="/var/www/repo/rpcgating/venvs"

                    # Determine the SHA and archive name that we'll use
                    pushd rpc-gating; SHA=\$(git rev-parse HEAD); popd
                    archive="rpcgatingvenv_\${SHA}.tbz"

                    # Set some SSH options
                    SSH_OPTS="-o StrictHostKeyChecking=no"

                    # Check to see if the virtual env archive already exists...if so, no need to rebuild it
                    set +e # Don't exit on error since we want to evalute the error code and exit cleanly
                    ssh \$SSH_OPTS \$REPO_USER@\$REPO_HOST "test -e \$REPO_PATH/\$archive"
                    if [[ \$? -eq 0 ]]; then
                      echo "Archive \$REPO_PATH/\$archive already exists.  Skipping virtual env build."

                      # Touch a skip file to indicate that we should NOT upload it below
                      touch \$archive.skip.upload

                      exit 0
                    fi
                    set -e # Exit on error

                    # Install virtualenv if required
                    if [[ ! -d ".venv" ]]; then
                      requirements="virtualenv==15.1.0"
                      pip install -U "\${requirements}" \
                        || pip install --isolated -U "\${requirements}"

                      if which scl
                      then
                        # redhat/centos
                        source /opt/rh/python27/enable
                        virtualenv --no-pip --no-setuptools --no-wheel --python=/opt/rh/python27/root/usr/bin/python .venv
                        # hack the selinux module into the venv
                        cp -r /usr/lib64/python2.6/site-packages/selinux .venv/lib64/python2.7/site-packages/ ||:
                      else
                        virtualenv --no-pip --no-setuptools --no-wheel .venv
                      fi
                    fi

                    # Install Pip
                    set +xeu
                    source .venv/bin/activate
                    set -xeu

                    # UG-613 change TMPDIR to directory with more space
                    export TMPDIR="/var/lib/jenkins/tmp"

                    # If the pip version we're using is not the same as the constraint then replace it
                    PIP_TARGET="\$(awk -F= '/^pip==/ {print \$3}' rpc-gating/constraints.txt)"
                    VENV_PYTHON=".venv/bin/python"
                    VENV_PIP=".venv/bin/pip"
                    if [[ "\$(\${VENV_PIP} --version)" != "pip \${PIP_TARGET}"* ]]; then
                      # Install a known version of pip, setuptools, and wheel in the venv
                      CURL_CMD="curl --silent --show-error --retry 5"
                      OUTPUT_FILE="get-pip.py"
                      \${CURL_CMD} https://bootstrap.pypa.io/get-pip.py > \${OUTPUT_FILE} \
                        || \${CURL_CMD} https://raw.githubusercontent.com/pypa/get-pip/master/get-pip.py > \${OUTPUT_FILE}
                      GETPIP_OPTIONS="pip setuptools wheel --constraint rpc-gating/constraints.txt"
                      \${VENV_PYTHON} \${OUTPUT_FILE} \${GETPIP_OPTIONS} \
                        || \${VENV_PYTHON} \${OUTPUT_FILE} --isolated \${GETPIP_OPTIONS}
                    fi

                    # Install rpc-gating requirements
                    PIP_OPTIONS="-c rpc-gating/constraints.txt -r rpc-gating/requirements.txt"
                    \${VENV_PIP} install \${PIP_OPTIONS} \
                      || \${VENV_PIP} install --isolated \${PIP_OPTIONS}

                    # Install ansible roles
                    mkdir -p rpc-gating/playbooks/roles
                    ansible-galaxy install -r rpc-gating/role_requirements.yml -p rpc-gating/playbooks/roles

                    # Tar venv and roles
                    find .venv -name \\*.pyc -delete
                    echo "\${PWD}/.venv" > .venv/original_venv_path
                    echo \$SHA > .venv/venv_sha
                    tar cjfp \$archive .venv rpc-gating/playbooks/roles
                  """

                  // Lock to prevent other jobs from uploading at the same time.
                  lock('build_gating_venv'){

                    sh """#!/bin/bash -xeu
                      # The repo path
                      REPO_PATH="/var/www/repo/rpcgating/venvs"

                      # Determine the SHA and archive name that we'll use
                      pushd rpc-gating; SHA=\$(git rev-parse HEAD); popd
                      archive="rpcgatingvenv_\${SHA}.tbz"

                      # Should we skip the upload? This file will exist from the previous step if we didn't generate a new archive.
                      if [[ -e \$archive.skip.upload ]]; then
                        echo "Archive \$REPO_PATH/\$archive already exists in the REPO and the virtual env build was previously skipped.  Skipping virtual env upload."
                        exit 0
                      fi

                      # Set some SSH options
                      SSH_OPTS="-o StrictHostKeyChecking=no"

                      # Let's check to see if the virtual env archive already exists one more time...if so, no need to re-upload it again.
                      # If we got to this point and the archive file does indeed exist in the REPO_PATH, then another process was probably already
                      # running and beat us to the archive/upload.  That's fine - since this is based on the SHA, the
                      # resulting archive _should_ be exactly the same.  No need to upload our copy and over write the
                      # original with the same file contents again. We'll skip out and just exit.
                      set +e    # Don't exit on error since we want to evalute the error code and exit cleanly
                      ssh \$SSH_OPTS \$REPO_USER@\$REPO_HOST "test -e \$REPO_PATH/\$archive"
                      if [[ \$? -eq 0 ]]; then
                        echo "Archive \$REPO_PATH/\$archive already exists after building it.  Another concurrent job beat us to the build/upload! Skipping virtual env upload."
                        exit 0
                      fi
                      set -e    # Re-enable exit on error

                      # Make sure the path exists...
                      ssh \${SSH_OPTS} \$REPO_USER@\$REPO_HOST "mkdir -p \$REPO_PATH"

                      # Upload generated version
                      scp \$SSH_OPTS \$archive \$REPO_USER@\$REPO_HOST:\$REPO_PATH

                      # Generate index
                      ssh \$SSH_OPTS \$REPO_USER@\$REPO_HOST "cd \$REPO_PATH; ls -1 *tbz > index"

                      # Keep 100 newest archives, remove the rest.
                      ssh \$SSH_OPTS \$REPO_USER@\$REPO_HOST "cd \$REPO_PATH && ls -t1 *tbz |tail -n +101 |while read f; do echo "'removing \$f'"; rm "'\$f'"; done"
                    """
                  } // lock
                } // sshagent
              } // container
            } // with credentials
          } finally {
              deleteDir()
          } // try
        } // node pubcloud_multiuse
      } // timestamps
