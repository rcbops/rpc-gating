# the github trigger for pipeline/worflow jobs will only trigger for pushes
# to the branch that was built previously. This means that the job must
# be run manually once to establish the branch.
# This is also why there is separate merge trigger job, as it ensures that
# JJB still runs on pushes to master, even if the JJB job is used to test_client
# an alternative branch.
- job:
    name: 'Merge-Trigger-JJB'
    project-type: workflow
    logrotate:
      daysToKeep: 14
    properties:
      - rpc-gating-github
    parameters:
      - rpc_gating_params
    triggers:
      - github # triggered post merge, not on PR
    dsl: |
      if (env.GIT_BRANCH == "master"){
          library "rpc-gating@${RPC_GATING_BRANCH}"
          common.shared_slave(){
            stage('Run Jenkins Job Builder') {
              git branch: "master", url: "https://github.com/rcbops/rpc-gating"
              build job: "Jenkins-Job-Builder"
            } // stage
          } // node
      } else {
        print ("Not running JJB as job was triggered by a push to a branch other than master")
      }

- job:
    name: "re634-Merge-Trigger-JJB"
    project-type: pipeline
    pipeline-scm:
      scm:
        - git:
            url: https://github.com/rcbops/rpc-gating
            branch: "re-634"
      script-path: job_dsl/merge_trigger_jjb.groovy
    concurrent: false
    properties:
      - build-discarder:
          num-to-keep: 30
    triggers:
        - github
    parameters:
      - rpc_gating_params

# Node CentOS to ensure the CIT slave is used. If a pub cloud ubuntu slave is used,
# the Jenkins API won't be reachable.
- job:
    name: 'Jenkins-Job-Builder'
    project-type: workflow
    description: Creates and updates jobs with Jenkins Job Builder.
    build-discarder:
        days-to-keep: 20
    parameters:
        - string:
            name: JOBS
            description: "Which jobs to update and with what options."
            default: -r rpc_jobs
        - bool:
            name: IGNORE_CACHE
            description: "Ignore cache when updating jobs."
        - bool:
            name: DELETE_OLD
            description: "Remove jobs that are no longer defined."
            default: false
        - rpc_gating_params
    dsl: |
      library "rpc-gating@${RPC_GATING_BRANCH}"
      common.internal_slave(){
        dir("rpc-gating"){
          stage('Run JJB'){
            withCredentials([
              usernamePassword(
                credentialsId: "service_account_jenkins_api_creds",
                usernameVariable: "JENKINS_USER",
                passwordVariable: "JENKINS_API_PASSWORD"
              )
            ]){
              sh """#!/bin/bash -xe
                source ../.venv/bin/activate

                cat > jenkins_jobs.ini << EOF
      [job-builder]
      ignore_cache=False
      keep_descriptions=False
      include_path=.:scripts:~/git/
      recursive=True
      exclude=.*manual:./development
      allow_deplicates=False

      [jenkins]
      url=${JENKINS_URL}
      EOF

                if [ "$IGNORE_CACHE" = "true" ]; then
                    JJB_ARGS="--ignore-cache"
                fi
                if [ "$DELETE_OLD" = "true" ]; then
                    UPDATE_ARGS="--delete-old"
                fi

                jenkins-jobs --conf jenkins_jobs.ini \
                             --user $JENKINS_USER \
                             --password $JENKINS_API_PASSWORD \
                             \$JJB_ARGS update \$UPDATE_ARGS $JOBS
              """
            }
          }
        }
      }
