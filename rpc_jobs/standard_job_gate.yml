- job-template:
    name: 'Component-Gate-Trigger_{repo_name}'
    project-type: pipeline
    concurrent: true
    test_with_antecedents: true
    status_context: "CIT/gate"
    triggers:
      - github-pull-request:
          org-list:
            - rcbops
          github-hooks: true
          trigger-phrase: ":shipit:"
          only-trigger-phrase: true
          auth-id: "github_account_rpc_jenkins_svc"
          status-context: "{status_context}"
          cancel-builds-on-update: true
    properties:
      - github:
          url: "{repo_url}"
      - build-discarder:
          days-to-keep: 14
    parameters:
      - rpc_gating_params
    dsl: |
      library "rpc-gating@${{RPC_GATING_BRANCH}}"

      common.globalWraps(){{
          testWithAntecedents = "{test_with_antecedents}".toBoolean()
          if (! github.is_pr_approved(["{status_context}"])) {{
              throw new Exception(
                  "Gate process cannot continue until the pull request is "
                  + "approved by required reviewers and checks."
              )
          }}
          gate.testPullRequest("{repo_name}", testWithAntecedents, "{status_context}")
      }} // globalWraps

- job-template:
    name: 'GATE_{repo_name}-{series}-{image}-{scenario}-{action}'
    series: "master"
    branch: "master"
    project-type: pipeline
    concurrent: true
    FLAVOR: "performance1-1"
    IMAGE: "Ubuntu 16.04 LTS (Xenial Xerus) (PVHVM)"
    BOOT_TIMEOUT: 900
    skip_pattern: ""
    properties:
      - build-discarder:
          num-to-keep: 14
      - github:
          url: "{repo_url}"
      - inject:
          properties-content: |
            STAGES="Allocate Resources, Connect Slave, Cleanup, Destroy Slave"
            BOOT_TIMEOUT={BOOT_TIMEOUT}
            RE_JOB_NAME={name}
            RE_JOB_IMAGE={image}
            RE_JOB_SCENARIO={scenario}
            RE_JOB_ACTION={action}
            RE_JOB_FLAVOR={FLAVOR}
            RE_JOB_REPO_NAME={repo_name}
    parameters:
      - rpc_gating_params
      - instance_params:
          IMAGE: "{IMAGE}"
          FLAVOR: "{FLAVOR}"
          REGIONS: "{REGIONS}"
          FALLBACK_REGIONS: "{FALLBACK_REGIONS}"
      - string:
          name: REPO_URL
          default: "{repo_url}"
          description: Url of the repo under test
      - string:
          name: BRANCH
          default: "{branch}"
          description: Branch of the repo under test
      - standard_job_params:
          SLAVE_TYPE: "{SLAVE_TYPE}"
          SLAVE_CONTAINER_DOCKERFILE_REPO: "{SLAVE_CONTAINER_DOCKERFILE_REPO}"
          SLAVE_CONTAINER_DOCKERFILE_PATH: "{SLAVE_CONTAINER_DOCKERFILE_PATH}"
          SLAVE_CONTAINER_DOCKERFILE_BUILD_ARGS: "{SLAVE_CONTAINER_DOCKERFILE_BUILD_ARGS}"
          hold_on_error: "{hold_on_error}"
      - string:
          name: skip_pattern
          default: "{skip_pattern}"
          description: |
            Python re compatible regex, with verbose flag enabled. If all files changed by the
            pull request match the regex the build will exit without running the test scripts.
            This is used to skip tests that are not relevant to a change, for example testing a
            deployment when only changing documentation. By default no builds are skipped.
      - string:
          name: pullRequestChain
          default: ""
          description: |
            A comma separated list of pull requsts IDs to enable the testing of a chain of pull requests.

    dsl: |
      library "rpc-gating-master"
      common.stdJob("gate", "{credentials}", "", "{wrappers}")
