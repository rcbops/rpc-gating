- project:
    name: 'RPC-Artifact-Build-Jobs'
    # Note: branch is the branch for periodics to build
    #       branches is the branch pattern to match for PR Jobs.
    series:
      - artifacts:
          branch: artifacts
          branches: "artifacts.*"
    image:
      - trusty:
          IMAGE: "Ubuntu 14.04.5 LTS prepared for RPC deployment"
      - xenial:
          IMAGE: "Ubuntu 16.04.2 LTS prepared for RPC deployment"
    context:
      - Git
      - Apt
      - Python
      - Container
      - Pipeline
    ztrigger:
      - pr:
          CRON: ""
          STAGES: >-
            Build {context} Artifacts,
            Allocate Resources,
            Connect Slave,
            Cleanup,
            Destroy Slave
      - periodic:
          branches: "do_not_build_on_pr"
          PUSH_TO_MIRROR: "YES"
          NUM_TO_KEEP: 10
    exclude:
      - context: Git
        ztrigger: periodic
      - context: Apt
        ztrigger: periodic
      - context: Python
        ztrigger: periodic
      - context: Container
        ztrigger: periodic
      - context: Pipeline
        ztrigger: pr
    jobs:
      - 'RPC-Artifact-Build_{series}-{image}-{context}-{ztrigger}'

- job-template:
    # DEFAULTS
    STAGES: >-
      Build Apt Artifacts,
      Build Git Artifacts,
      Build Python Artifacts,
      Build Container Artifacts,
      Allocate Resources,
      Connect Slave,
      Cleanup,
      Destroy Slave
    branch: artifacts-14.0
    PUSH_TO_MIRROR: "NO"
    NUM_TO_KEEP: 30

    # TEMPLATE
    name: 'RPC-Artifact-Build_{series}-{image}-{context}-{ztrigger}'
    project-type: workflow
    concurrent: false
    properties:
      - build-discarder:
          num-to-keep: "{NUM_TO_KEEP}"
      - rpc-openstack-github
    parameters:
      # See params.yml
      - rpc_repo_params:
         RPC_BRANCH: "{branch}"
      - rpc_gating_params
      - single_use_slave_params:
         IMAGE: "{IMAGE}"
         FLAVOR: "{FLAVOR}"
         REGION: "{REGION}"
      - string:
          name: ANSIBLE_PARAMETERS
          default: "-v"
          description: "Change the Ansible parameters for the playbook execution."
      - string:
          name: PULL_FROM_MIRROR
          default: "YES"
          description: "Set this to NO to skip downloading existing data from rpc-repo. This may cause the loss of existing artifacts on rpc-repo. USE WITH CAUTION!"
      - string:
          name: REPLACE_ARTIFACTS
          default: "NO"
          description: "Set this to YES if you want to replace any existing artifacts for the current release with those built in this job."
      - string:
          name: PUSH_TO_MIRROR
          default: "{PUSH_TO_MIRROR}"
          description: "Set this to YES if you want to push any changes made in this job to rpc-repo."
      - string:
          name: STAGES
          default: "{STAGES}"
          description: |
            Pipeline stages to run CSV. Note that this list does not influence execution order.
            Options:
              Build Apt Artifacts
              Build Git Artifacts
              Build Python Artifacts
              Build Container Artifacts
              Allocate Resources (used to create an instance)
              Connect Slave (used to connect to the instance)
              Pause (use to hold instance for investigation before cleanup)
              Cleanup (used to clean up the instance)
              Destroy Slave (used to destroy the jenkins slave)
    triggers:
      - timed: "{CRON}"
      - github-pull-request:
          org-list:
            - rcbops
          github-hooks: true
          trigger-phrase: '.*recheck_cit_all.*|.*recheck_cit_artifact_{image}_{context}.*'
          only-trigger-phrase: false
          white-list-target-branches:
            - "{branches}"
          auth-id: "github_account_rpc_jenkins_svc"
          status-context: 'CIT/artifact-{image}-{context}'
          cancel-builds-on-update: true
    dsl: |
      node() {{
        currentBuild.result = "SUCCESS"
        // We need to checkout the rpc-openstack repo on the CIT Slave
        // so that we can cater for builds on the more restricted images
        // used for artifact-based builds.
        common.prepareRpcGit("auto", env.WORKSPACE)
        try {{
          node('ArtifactBuilder2') {{
            dir("rpc-gating") {{
                git branch: env.RPC_GATING_BRANCH, url: env.RPC_GATING_REPO
                common = load 'pipeline_steps/common.groovy'
                artifact_build = load 'pipeline_steps/artifact_build.groovy'
            }}
            artifact_build.apt()
          }} // node ArtifactBuilder2
            dir("rpc-gating") {{
                git branch: env.RPC_GATING_BRANCH, url: env.RPC_GATING_REPO
                common = load 'pipeline_steps/common.groovy'
                pubcloud = load 'pipeline_steps/pubcloud.groovy'
                artifact_build = load 'pipeline_steps/artifact_build.groovy'
            }}
            artifact_build.git()
            artifact_build.python()
            artifact_build.container()
        }} catch (e) {{
          print e
          currentBuild.result = "FAILURE"
          throw e
        }} finally {{
          common.safe_jira_comment("${{currentBuild.result}}: [${{env.BUILD_TAG}}|${{env.BUILD_URL}}]")
        }}
      }} // node
