- job:
    name: 'Component-Release-Trigger'
    project-type: pipeline
    concurrent: true
    triggers:
      - github-pull-request:
          org-list:
            - rcbops
          github-hooks: true
          trigger-phrase: 'run_component_release'
          only-trigger-phrase: true
          auth-id: "github_account_rpc_jenkins_svc"
          status-context: 'CIT/release'
          cancel-builds-on-update: true
    properties:
      - github:
          url: "https://github.com/rcbops/releases"
      - build-discarder:
          days-to-keep: 30
    parameters:
      - rpc_gating_params
    dsl: |
      library "rpc-gating-master"
      common.globalWraps(){
        dir("${env.WORKSPACE}/releases") {
          common.clone_with_pr_refs()
          if (! github.is_pr_approved(["CIT/release"])) {
            throw new Exception(
              "Release process cannot continue until the pull request is "
              + "approved by required reviewers and checks."
            )
          }
          common.runReleasesPullRequestWorkflow("origin/master", "HEAD", "RE", "CIT/release")
        } // dir
      } // globalWraps

- job:
    name: 'Component-Release'
    project-type: pipeline
    concurrent: false
    properties:
      - build-discarder:
          days-to-keep: 30
    parameters:
      - rpc_gating_params
      - text:
          name: component_text
      - bool:
          name: from_rc_branch
          default: false
      - validating-string:
          name: pr_repo
          regex: "[a-zA-Z0-9-]+/[a-zA-Z0-9._-]+"
          msg: "The release repository must be supplied."
      - validating-string:
          name: pr_number
          regex: "[0-9]+"
          msg: "The number of the pull request to merge is required."
    dsl: |
      library "rpc-gating@${RPC_GATING_BRANCH}"
      common.globalWraps(){
        dir("${env.WORKSPACE}/releases"){
          common.clone_with_pr_refs(
            ".", "git@github.com:${pr_repo}.git", "origin/pr/${pr_number}/merge",
          )
          sh """#!/bin/bash -xe
            virtualenv --python python3 .venv3
            set +x; . .venv3/bin/activate; set -x
            pip install -c '${env.WORKSPACE}/rpc-gating/constraints_rpc_component.txt' rpc_component
          """
          component = readYaml text: component_text
          println "=== component CLI standard out ==="
          println component_text

          String pred_component_text = sh(
            script: """#!/bin/bash -xe
              set +x; . .venv3/bin/activate; set -x
              src_branch="origin/master"
              pr_branch="HEAD"
              component --releases-dir .\
                 release --component-name ${component["name"]}\
                 get --version ${component["release"]["version"]} --pred || true
            """,
            returnStdout: true
          )

          println "=== predecessor component CLI standard out ==="
          println pred_component_text

          if (pred_component_text == ""){
            pred_version = ""
          }else{
            pred_component = readYaml text: pred_component_text
            pred_version = pred_component["release"]["version"]
          }
        }

        ORG=component["repo_url"].split("/")[3]
        REPO=component["name"]
        SHA=component["release"]["sha"]
        VERSION=component["release"]["version"]
        PREVIOUS_VERSION=pred_version
        RELEASE_NOTES_FILE="${WORKSPACE}/artifacts/release_notes"
        MAINLINE=component["release"]["series"]
        RC_BRANCH="${MAINLINE}-rc"

        if (from_rc_branch == "false"){
          println "An RC branch called ${RC_BRANCH} was not found, releasing from ${MAINLINE}"
          release_command = """\
            python rpc-gating/scripts/release.py \
                --debug \
                --org "${ORG}" \
                --repo "${REPO}" \
                clone \
                    --ref "${MAINLINE}" \
                publish_tag \
                    --ref "${SHA}" \
                    --version "${VERSION}" \
                generate_release_notes \
                    --version "${VERSION}" \
                    --prev-version "${PREVIOUS_VERSION}" \
                    --script "optional:gating/generate_release_notes/pre" \
                    --script "gating/generate_release_notes/run" \
                    --script "optional:gating/generate_release_notes/post" \
                    --out-file "${RELEASE_NOTES_FILE}" \
                create_release \
                    --version "${VERSION}" \
                    --bodyfile "${RELEASE_NOTES_FILE}" \
                publish_release_to_wiki \
                    --component "${REPO}" \
                    --version "${VERSION}" \
          """
        } else{
          println "An RC branch called ${RC_BRANCH} was found, releasing from ${RC_BRANCH}"
          release_command = """\
            python rpc-gating/scripts/release.py \
                --debug \
                --org "${ORG}" \
                --repo "${REPO}" \
                clone \
                    --ref "${RC_BRANCH}" \
                publish_tag \
                    --ref "${SHA}" \
                    --version "${VERSION}" \
                generate_release_notes \
                    --version "${VERSION}" \
                    --prev-version "${PREVIOUS_VERSION}" \
                    --script "optional:gating/generate_release_notes/pre" \
                    --script "gating/generate_release_notes/run" \
                    --script "optional:gating/generate_release_notes/post" \
                    --out-file "${RELEASE_NOTES_FILE}" \
                create_release \
                    --version "${VERSION}" \
                    --bodyfile "${RELEASE_NOTES_FILE}" \
                update_rc_branch \
                    --rc "${RC_BRANCH}" \
                    --mainline "${MAINLINE}" \
                publish_release_to_wiki \
                    --component "${REPO}" \
                    --version "${VERSION}" \
          """
        }
        build(
          job: "RE-Release",
          wait: true,
          parameters: [
            [
              $class: "StringParameterValue",
              name: "RPC_GATING_BRANCH",
              value: RPC_GATING_BRANCH,
            ],
            [
              $class: "StringParameterValue",
              name: "COMMAND",
              value: release_command,
            ],
          ]
        )
      }

- job-template:
    name: 'RELEASE_{repo_name}-{branch}-{image}-{scenario}-{action}'
    branch: "master"
    jira_project_key: ""
    project-type: pipeline
    concurrent: false
    FLAVOR: "performance1-1"
    IMAGE: "Ubuntu 16.04 LTS (Xenial Xerus) (PVHVM)"
    BOOT_TIMEOUT: 900
    properties:
      - build-discarder:
          num-to-keep: 14
      - github:
          url: "{repo_url}"
      - inject:
          properties-content: |
            STAGES="Allocate Resources, Connect Slave, Cleanup, Destroy Slave"
            BOOT_TIMEOUT={BOOT_TIMEOUT}
            RE_JOB_NAME={name}
            RE_JOB_IMAGE={image}
            RE_JOB_SCENARIO={scenario}
            RE_JOB_ACTION={action}
            RE_JOB_FLAVOR={FLAVOR}
            RE_JOB_REPO_NAME={repo_name}
            RE_JOB_BRANCH={branch}
    parameters:
      - rpc_gating_params
      - instance_params:
          IMAGE: "{IMAGE}"
          FLAVOR: "{FLAVOR}"
          REGIONS: "{REGIONS}"
          FALLBACK_REGIONS: "{FALLBACK_REGIONS}"
      - string:
          name: REPO_URL
          default: "{repo_url}"
          description: Url of the repo under test
      - string:
          name: BRANCH
          default: "{branch}"
          description: Branch of the repo under test
      - standard_job_params:
          SLAVE_TYPE: "{SLAVE_TYPE}"
          SLAVE_CONTAINER_DOCKERFILE_REPO: "{SLAVE_CONTAINER_DOCKERFILE_REPO}"
          SLAVE_CONTAINER_DOCKERFILE_PATH: "{SLAVE_CONTAINER_DOCKERFILE_PATH}"
          SLAVE_CONTAINER_DOCKERFILE_BUILD_ARGS: "{SLAVE_CONTAINER_DOCKERFILE_BUILD_ARGS}"
    dsl: |
      library "rpc-gating@${{RPC_GATING_BRANCH}}"
      common.stdJob("release", "{credentials}", "{jira_project_key}", "{wrappers}")
