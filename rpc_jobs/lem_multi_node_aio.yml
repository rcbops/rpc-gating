- project:
    name: 'LEM-Multi-Node-AIO-Jobs'
    # Note: branch is the branch for periodics to build
    #       branches is the branch pattern to match for PR Jobs.
    series:
      - mitaka:
          branch: mitaka-13.1
          OPENSTACK_ANSIBLE_BRANCH: "stable/mitaka"
      - newton:
          branch: newton-14.0
          OPENSTACK_ANSIBLE_BRANCH: "stable/newton"
      - master:
          branch: master
          OPENSTACK_ANSIBLE_BRANCH: "stable/newton"
    context:
      - trusty:
          DEFAULT_IMAGE: "14.04.5"
      - xenial:
          DEFAULT_IMAGE: "16.04.2"

    # NOTE: Hugh tested this and found that ztrigger overrides series and
    #       trigger doesn't, which is odd because both trigger and ztrigger
    #       sort after series.
    ztrigger:
      - periodic
    exclude:
      # Xenial builds are run for newton and above.
      - series: mitaka
        context: xenial
    jobs:
      - 'LEM-Multi-Node-AIO_{series}-{context}-{ztrigger}'

- job-template:
    # DEFAULTS
    NUM_TO_KEEP: 30

    # TEMPLATE
    name: 'LEM-Multi-Node-AIO_{series}-{context}-{ztrigger}'
    project-type: workflow
    concurrent: true
    properties:
      - build-discarder:
          num-to-keep: "{NUM_TO_KEEP}"
      - rpc-openstack-github
    parameters:
      # See params.yml
      - rpc_repo_params:
          RPC_BRANCH: "{branch}"
      - rpc_gating_params
      - osa_ops_params:
          OPENSTACK_ANSIBLE_BRANCH: "{OPENSTACK_ANSIBLE_BRANCH}"
          DEFAULT_IMAGE: "{DEFAULT_IMAGE}"
          DATA_DISK_DEVICE: "mapper/lxc-aio"
      - rpc_repo_params:
          RPC_BRANCH: "{branch}"
      - tempest_params:
          TEMPEST_TEST_SETS: "scenario defcore cinder_backup"
          RUN_TEMPEST_OPTS: "--serial"
          TESTR_OPTS: ""
      - string:
          name: STAGES
          default: |
            Connect Slave,
            Prepare LEM AIO,
            Prepare Multi-Node AIO,
            Prepare RPC Configs,
            Deploy RPC w/ Script,
            Prepare MaaS,
            Setup MaaS,
            Verify MaaS,
            Install Tempest,
            Tempest Tests,
            Prepare Kibana Selenium,
            Kibana Tests,
            Holland,
            Destroy Slave
          description: |
            Pipeline stages to run CSV. Note that this list does not influence execution order.
            Options:
              Connect Slave
              Prepare LEM AIO
              Prepare Multi-Node AIO
              Prepare RPC Configs
              Deploy RPC w/ Script
              Prepare MaaS
              Setup MaaS
              Verify MaaS
              Install Tempest
              Tempest Tests
              Prepare Kibana Selenium
              Kibana Tests
              Holland (test holland mysql backup)
              Destroy Slave
      - string:
          name: INSTANCE_NAME
          description: The hostname of the instance/server being deployed to
      - string:
          name: INSTANCE_IP
          description: The IP address of the instance/server being deployed to
      - string:
          name: REGION
          description: The public cloud region, required when creating MaaS checks/alarms
          default: DFW
    triggers:
      - timed: ""

    dsl: |
      // CIT Slave node
      timeout(time: 8, unit: 'HOURS'){{
        node() {{
          dir("rpc-gating") {{
              git branch: env.RPC_GATING_BRANCH, url: env.RPC_GATING_REPO
              common = load 'pipeline_steps/common.groovy'
              ssh_slave = load 'pipeline_steps/ssh_slave.groovy'
              multi_node_aio_prepare = load 'pipeline_steps/multi_node_aio_prepare.groovy'
              deploy = load 'pipeline_steps/deploy.groovy'
              tempest = load 'pipeline_steps/tempest.groovy'
              holland = load 'pipeline_steps/holland.groovy'
              maas = load 'pipeline_steps/maas.groovy'
              kibana = load 'pipeline_steps/kibana.groovy'
          }}
          dir("rpc-gating/playbooks") {{
            writeFile file: "inventory/hosts", text: "[job_nodes]\n${{INSTANCE_NAME}} ansible_host=${{INSTANCE_IP}}\n"
            common.install_ansible()
          }}
          ssh_slave.connect()
          node(INSTANCE_NAME) {{
            common.conditionalStage(
              stage_name: 'Prepare LEM AIO',
              stage: {{
                sh """
                   lvcreate -n aio -L250G lxc
                """
              }} //stage
            ) //conditionalStage
            multi_node_aio_prepare.prepare()
            deploy.deploy_sh(
              vm: "deploy1",
              environment_vars: [
                "DEPLOY_HAPROXY=yes",
                "DEPLOY_ELK=yes",
                "DEPLOY_TEMPEST=no",
                "DEPLOY_AIO=no",
                "DEPLOY_MAAS=no"
                ]
            ) // deploy_sh
            multi_node_aio_prepare.multi_node_aio_networking()
            node(){{
              maas.prepare(instance_name: instance_name)
              maas.deploy()
              maas.verify()
              tempest.tempest("infra1", "deploy1")
              kibana.kibana("deploy1")
              holland.holland()
            }}
            ssh_slave.destroy()
            maas.entity_cleanup(instance_name: instance_name)
          }}
        }}
      }}
