- project:
    name: "gating"
    repo_url: "https://github.com/rcbops/rpc-gating"
    branches:
      - "master"
    image:
      - "xenial"
    scenario:
      - "functional"
    action:
      - "test"
    jobs:
      - 'PR_{name}-{image}-{scenario}-{action}'

- job-template:
    name: 'PR_{name}-{image}-{scenario}-{action}'
    project-type: pipeline
    concurrent: true
    FLAVOR: "performance1-1"
    IMAGE: "Ubuntu 16.04 LTS (Xenial Xerus) (PVHVM)"
    properties:
      - build-discarder:
          num-to-keep: "30"
      - github:
          url: "{repo_url}"
    parameters:
      - rpc_gating_params
      - instance_params:
          IMAGE: "{IMAGE}"
          FLAVOR: "{FLAVOR}"
          REGIONS: "{REGIONS}"
          FALLBACK_REGIONS: "{FALLBACK_REGIONS}"
      - string:
          name: STAGES
          default: >-
            Allocate Resources,
            Connect Slave,
            Cleanup,
            Destroy Slave
          description: |
            Pipeline stages to run CSV. Note that this list does not influence execution order.
            Options:
              Allocate Resources
              Connect Slave
              Cleanup
              Destroy Slave
    triggers:
      - github-pull-request:
          org-list:
            - rcbops
          github-hooks: true
          trigger-phrase: '.*recheck_(cit_)?all.*|.*recheck_(cit_)?{image}_{scenario}_{action}.*'
          only-trigger-phrase: false
          white-list-target-branches: "{branches}"
          auth-id: "github_account_rpc_jenkins_svc"
          status-context: 'CIT/{image}_{scenario}_{action}'
          cancel-builds-on-update: true

    dsl: |
      library "rpc-gating@${{RPC_GATING_BRANCH}}"

      // Pass details about the job parameters through
      // to the target environment so that scripts can
      // use them to adapt behaviour.
      env.RE_JOB_NAME = "{name}"
      env.RE_JOB_IMAGE = "{image}"
      env.RE_JOB_SCENARIO = "{scenario}"
      env.RE_JOB_ACTION = "{action}"
      env.RE_JOB_FLAVOR = "{FLAVOR}"
      env.RE_JOB_TRIGGER = "PR"

      // Apply a global three hour timeout
      timeout(time: 3, unit: 'HOURS'){{
        common.shared_slave() {{
          pubcloud.runonpubcloud {{

            // Set the default environment variables used
            // by the artifact and test result collection.
            env.RE_HOOK_ARTIFACT_DIR="${{env.WORKSPACE}}/artifacts"
            env.RE_HOOK_RESULT_DIR="${{env.WORKSPACE}}/results"

            // Set the job result default
            currentBuild.result="SUCCESS"

            try {{
              ansiColor('xterm') {{
                dir("${{env.WORKSPACE}}/${{env.ghprbGhRepository}}") {{
                  withCredentials(common.get_cloud_creds()) {{

                    stage('Checkout') {{
                      print("Triggered by PR: ${{env.ghprbPullLink}}")
                      common.clone_with_pr_refs()
                    }} // stage

                    stage('Execute Pre-Merge Test (pre)') {{
                      // Retry the 'pre' stage 3 times. The 'pre' stage is considered
                      // to be preparation for the test, so let's try and make sure
                      // it has the best chance of success possible.
                      retry(3) {{
                        sh """#!/bin/bash -xeu
                        if [[ -e gating/pre_merge_test/pre ]]; then
                          gating/pre_merge_test/pre
                        fi
                        """
                      }}
                    }} // stage

                    stage('Execute Pre-Merge Test (run)') {{
                      sh """#!/bin/bash -xeu
                      gating/pre_merge_test/run
                      """
                    }} // stage

                    stage('Execute Pre-Merge Test (post)') {{
                      // We do not want the 'post' execution to fail the test,
                      // but we do want to know if it fails so we make it only
                      // return status.
                      post_result = sh(
                        returnStatus: true,
                        script: """#!/bin/bash -xeu
                                   if [[ -e gating/pre_merge_test/post ]]; then
                                     gating/pre_merge_test/post
                                   fi"""
                      )
                      if (post_result != 0) {{
                        print("Pre-Merge Test (post) failed with return code ${{post_result}}")
                      }} // if
                    }} // stage

                  }} // withCredentials
                }} // dir
              }} // ansiColor
            }} catch (e) {{
              print(e)
              currentBuild.result="FAILURE"
              throw e
            }} finally {{
              common.safe_jira_comment("${{currentBuild.result}}: [${{env.BUILD_TAG}}|${{env.BUILD_URL}}]")
              common.archive_artifacts()
            }} // try
          }} // pubcloud slave
        }} // cit node
      }} // timeout
