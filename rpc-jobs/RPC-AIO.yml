- project:
    name: 'RPC-AIO-Jobs'
    # Note: branch is the branch for periodics to build
    #       branches is the branch pattern to match for PR Jobs.
    series:
      - liberty:
          branch: liberty-12.2
          branches: "liberty-.*"
      - mitaka:
          branch: mitaka-13.1
          branches: "mitaka-.*"
      - newton:
          branch: newton-14.0
          branches: "newton-.*"
      - artifacts:
          branch: artifacts-14.0
          branches: "artifacts-.*"
      - master:
          branch: master
          branches: "master"
    context:
      - swift
      - ceph:
          DEPLOY_SWIFT: "no"
          DEPLOY_CEPH: "yes"
          CONTEXT_USER_VARS: |
            cinder_cinder_conf_overrides:
                DEFAULT:
                    default_volume_type: ceph
            cinder_service_backup_driver: cinder.backup.drivers.ceph
            cinder_service_backup_program_enabled: true
            tempest_service_available_swift: false
      - upgrade:
          STAGES: "Allocate Resources, Connect Slave, Prepare Deployment, Deploy RPC w/ Script, Setup MaaS, Verify MaaS, Install Tempest, Tempest Tests, Upgrade, Cleanup"
      - xenial:
          IMAGE: "Ubuntu 16.04 LTS (Xenial Xerus) (PVHVM)"

    # NOTE: Hugh tested this and found that ztrigger overrides series and
    #       trigger doesn't, which is odd because both trigger and ztrigger
    #       sort after series.
    ztrigger:
      - pr:
          CRON: ""
          TRIGGER_USER_VARS: "maas_use_api: false"
      - periodic:
          branches: "do_not_build_on_pr"
    exclude:
      - series: liberty
        context: upgrade
      - series: newton
        context: upgrade
      - series: artifacts
        context: upgrade
      - series: master
        context: upgrade
      # Xenial builds are run for newton and above.
      - series: liberty
        context: xenial
      - series: mitaka
        context: xenial
      # Artifacts are currently only built for Trusty
      - series: artifacts
        context: xenial
      # An artifacted ceph deployment is not yet supported
      - series: artifacts
        context: ceph
    jobs:
      - 'RPC-AIO_{series}-{context}-{ztrigger}'

- job-template:
    # DEFAULTS
    IMAGE: "Ubuntu 14.04 LTS (Trusty Tahr) (PVHVM)"
    DEPLOY_SWIFT: "yes"
    DEPLOY_CEPH: "no"
    DEPLOY_ELK: "yes"
    CRON: "H H(9-21) * * 1-5"
    CONTEXT_USER_VARS: ""
    TRIGGER_USER_VARS: ""
    SERIES_USER_VARS: ""
    UPGRADE_FROM_REF: "liberty-12.2"
    STAGES: "Allocate Resources, Connect Slave, Prepare Deployment, Deploy RPC w/ Script, Setup MaaS, Verify MaaS, Install Tempest, Tempest Tests, Cleanup"
    branch: master

    # TEMPLATE
    name: 'RPC-AIO_{series}-{context}-{ztrigger}'
    project-type: workflow
    concurrent: true
    properties:
      - build-discarder:
          num-to-keep: 7
    parameters:
      # See params.yml
      - rpc_params:
         RPC_BRANCH: "{branch}"
         DEPLOY_SWIFT: "{DEPLOY_SWIFT}"
         DEPLOY_CEPH: "{DEPLOY_CEPH}"
         DEPLOY_ELK: "{DEPLOY_ELK}"
         USER_VARS: |
           {CONTEXT_USER_VARS}
           {SERIES_USER_VARS}
           {TRIGGER_USER_VARS}
         UPGRADE_FROM_REF: "{UPGRADE_FROM_REF}"
      - rpc_gating_params
      - single_use_slave_params:
         IMAGE: "{IMAGE}"
         FLAVOR: "performance2-15"
         REGION: "DFW"
      - tempest_params:
         TEMPEST_TEST_SETS: "scenario defcore cinder_backup"
         RUN_TEMPEST_OPTS: "--serial"
         TESTR_OPTS: ""
      - string:
          name: STAGES
          default: "{STAGES}"
          description: |
            Pipeline stages to run CSV. Note that this list does not influence execution order.
            Options:
              Allocate Resources
              Connect Slave
              Prepare Deployment
              Deploy RPC w/ Script
              Setup MaaS
              Verify MaaS
              Install Tempest
              Tempest Tests
              Holland (test holland mysql backup)
              Upgrade
              Pause (use to hold instance for investigation before cleanup)
              Cleanup
    triggers:
      - timed: "{CRON}"
      - github-pull-request:
          org-list:
            - rcbops
          github-hooks: true
          trigger-phrase: '.*recheck_cit_all.*|.*recheck_cit_{context}.*'
          only-trigger-phrase: false
          white-list-target-branches:
            - "{branches}"
          auth-id: "github_account_rpc_jenkins_svc"
          status-context: 'CIT/{context}'

    dsl: |
      // CIT Slave node
      node() {{
        /* if job is triggered by PR, then we need to set RPC_REPO and
          RPC_BRANCH using the env vars supplied by ghprb. Ztrigger is a
          jjb variable so uses single braces.
        */
        if ("{ztrigger}" == "pr" ){{
          env.RPC_REPO = env.ghprbAuthorRepoGitUrl
          env.RPC_BRANCH = "origin/pr/${{ghprbPullId}}/merge" #matches the refspec in aio_prepare.groovy
          print("""Triggered by PR: ${{ghprbPullLink}} RPC_REPO: ${{RPC_REPO}} Branch: ${{RPC_BRANCH}}""")
        }}
        dir("rpc-gating") {{
            git branch: env.RPC_GATING_BRANCH, url: env.RPC_GATING_REPO
            common = load 'pipeline-steps/common.groovy'
            pubcloud = load 'pipeline-steps/pubcloud.groovy'
            aio_prepare = load 'pipeline-steps/aio_prepare.groovy'
            deploy = load 'pipeline-steps/deploy.groovy'
            tempest = load 'pipeline-steps/tempest.groovy'
            holland = load 'pipeline-steps/holland.groovy'
            maas = load 'pipeline-steps/maas.groovy'
        }}
        pubcloud.runonpubcloud {{
          // try within pubcloud node so we can archive archive_artifacts
          // after a failure, before the node is cleaned up.
          try {{
            environment_vars = [
              "DEPLOY_HAPROXY=yes",
              "DEPLOY_AIO=no",
              "DEPLOY_MAAS=no",
              "DEPLOY_TEMPEST=no",
              "DEPLOY_SWIFT=${{DEPLOY_SWIFT}}",
              "DEPLOY_CEPH=${{DEPLOY_CEPH}}",
              "DEPLOY_ELK=${{DEPLOY_ELK}}",
              ]
            aio_prepare.prepare()
            deploy.deploy_sh(environment_vars: environment_vars)
            deploy.addChecksumRule()
            maas.deploy()
            maas.verify()
            tempest.tempest()
            holland.holland()
            if (env.STAGES.contains("Upgrade")) {{
              deploy.upgrade(environment_vars: environment_vars)
              deploy.addChecksumRule()
              maas.deploy()
              maas.verify()
              tempest.tempest()
              holland.holland()
            }}
          }} catch (e) {{
            print(e)
            throw e
          }} finally {{
            common.archive_artifacts()
          }}
        }} //pubcloud slave
      }} // cit node
