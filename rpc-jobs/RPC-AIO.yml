- project:
    name: "RPC-AIO Single Job"
    jobs:
      - 'RPC-AIO'

- job-template:
    # DEFAULTS
    IMAGE: "Ubuntu 14.04 LTS (Trusty Tahr) (PVHVM)"
    DEPLOY_CEPH: "no"
    DEPLOY_ELK: "yes"
    CRON: "H H(9-21) * * 1-5"
    USER_VARS: ""
    UPGRADE_FROM_REF: "liberty-12.2"
    STAGES: "Allocate Resources, Connect Slave, Prepare Deployment, Deploy RPC w/ Script, Install Tempest, Tempest Tests, Cleanup"
    branch: master

    # TEMPLATE
    name: 'RPC-AIO'
    project-type: workflow
    concurrent: true
    properties:
      - build-discarder:
          num-to-keep: 30
    parameters:
      # See params.yml
      - rpc_params:
         RPC_BRANCH: "{branch}"
         DEPLOY_CEPH: "{DEPLOY_CEPH}"
         DEPLOY_ELK: "{DEPLOY_ELK}"
         USER_VARS: "{USER_VARS}"
         UPGRADE_FROM_REF: "{UPGRADE_FROM_REF}"
      - rpc_gating_params
      - single_use_slave_params:
         IMAGE: "{IMAGE}"
      - tempest_params
      - string:
          name: STAGES
          default: "{STAGES}"
          description: |
            Pipeline stages to run CSV. Note that this list does not influence execution order.
            Options:
              Allocate Resources
              Connect Slave
              Prepare Deployment
              Deploy RPC w/ Script
              Install Tempest
              Tempest Tests
              Holland (test holland mysql backup)
              Upgrade
              Pause (use to hold instance for investigation before cleanup)
              Cleanup
    triggers:
      - timed: "{CRON}"
    dsl: |
      // CIT Slave node
      node() {{
        try {{
          dir("rpc-gating") {{
              git branch: env.RPC_GATING_BRANCH, url: env.RPC_GATING_REPO
              common = load 'pipeline-steps/common.groovy'
              pubCloudSlave = load 'pipeline-steps/pubcloud.groovy'
              aio_prepare = load 'pipeline-steps/aio_prepare.groovy'
              deploy = load 'pipeline-steps/deploy.groovy'
              tempest = load 'pipeline-steps/tempest.groovy'
              holland = load 'pipeline-steps/holland.groovy'
          }}
          instance_name = common.gen_instance_name()
          pubCloudSlave.getPubCloudSlave(instance_name: instance_name)
          node(instance_name) {{
            try {{
              environment_vars = [
                "DEPLOY_HAPROXY=yes",
                "DEPLOY_AIO=no",
                "DEPLOY_MAAS=no",
                "DEPLOY_TEMPEST=no",
                "DEPLOY_CEPH=${{DEPLOY_CEPH}}",
                "DEPLOY_ELK=${{DEPLOY_ELK}}",
                ]
              aio_prepare.prepare()
              deploy.deploy_sh(environment_vars: environment_vars)
              deploy.addChecksumRule()
              tempest.tempest()
              holland.holland()
              deploy.upgrade(environment_vars: environment_vars)
              deploy.addChecksumRule()
              tempest.tempest()
            }} catch (e) {{
              print(e)
              throw e
            }} finally {{
              common.archive_artifacts()
            }}
          }} // pub cloud node
        }} catch (e) {{
          currentBuild.result = 'FAILURE'
          print(e)
          throw e
        }} finally {{
          pubCloudSlave.delPubCloudSlave()
        }}
      }} // cit node
