- job:
    name: RPC_AIO
    project-type: workflow
    concurrent: true
    properties:
      - build-discarder:
          num-to-keep: 30
    parameters:
      # See params.yml
      - rpc_params
      - rpc_gating_params
      - single_use_slave_params
      - tempest_params
      - string:
          name: STAGES
          default: "Allocate Resources, Connect Slave, Prepare Deployment, Deploy, Install Tempest, Tempest Tests, Cleanup"
          description: |
            Pipeline stages to run CSV. Note that this list does not influence execution order.
            Options:
              Allocate Resources
              Connect Slave
              Prepare Deployment
              Deploy
              Install Tempest
              Tempest Tests
              Holland (test holland mysql backup)
              Pause (use to hold instance for investigation before cleanup)
              Cleanup
      - text:
          name: PLAYBOOKS
          default: |
            [
              {"playbook": "setup-hosts.yml",           "path": "/opt/rpc-openstack/openstack-ansible/playbooks", "args": "--skip-tags=V-38462,V-38660"},
              {"playbook": "ceph-all.yml",              "path": "/opt/rpc-openstack/rpcd/playbooks"},
              {"playbook": "setup-infrastructure.yml",  "path": "/opt/rpc-openstack/openstack-ansible/playbooks"},
              {"playbook": "setup-openstack.yml",       "path": "/opt/rpc-openstack/openstack-ansible/playbooks"},
              {"playbook": "rpc-support.yml",           "path": "/opt/rpc-openstack/rpcd/playbooks"},
              {"playbook": "setup-maas.yml",            "path": "/opt/rpc-openstack/rpcd/playbooks"},
              {"playbook": "setup-logging.yml",         "path": "/opt/rpc-openstack/rpcd/playbooks"},
              {"playbook": "verify-maas.yml",           "path": "/opt/rpc-openstack/rpcd/playbooks"}
            ]
          description: |
            OSA/RPC playbooks to run.
            Format: JSON list of dicts. Each dict must have keys playbook, path.
             Optional keys: args. All values are strings.

    dsl: |
      @Library("rpc-gating") _
      // CIT Slave node
      node(){
        pubcloud.runonpubcloud(step: {
          try {
            aio_prepare.prepare()
            deploy.deploy()
            tempest.tempest()
            holland.holland()
          } catch (e) {
            print(e)
            throw e
          } finally {
            common.archive_artifacts()
          }
        })
      } // cit node
